/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝

/// ╔═══════════════════════════════╗
/// ║	Market Structure Oscillador	║
/// ╔═══════════════════════════════╗
/// ║	AI Adaptive Money Flow Index║
/// ╔═══════════════════════════════╗
/// ║	Adx							║
/// ╔═══════════════════════════════╗
/// ║	Delta						║
/// ╔═══════════════════════════════╗
/// ║	All Tsi						║
/// ╚═══════════════════════════════╝

/// ╔═══════════════════════════════╗
/// ║	xTrend indicators Panel		║
/// ║	xMulti indicators Panel		║
/// ║	xTicker Panel				║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝


//@version=5
indicator(title							= 'AiMfi & MkOsc & Adx & allTsi & xMtPanel & xPanelIn [🎱 Allen 㔬]',
		  shorttitle					= 'MkOsc MfiAdx allTsi xPnlx [🎱 Allen 㔬]',
		  overlay						= true,
		  max_boxes_count				= 500,
		  max_labels_count				= 500,
		  max_lines_count				= 500,
		  format						= format.price,
		  precision						= 1)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


globalGroupIndicat						= 'Visualización Global'
globalGroupTimeframe					= 'Configuración Global'

strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

/// Title Global ―――――――――――――――――――――――

/// Visual Global ――――――――――――――――――――――
display_xTsiMu_TSI						= input.bool	(defval = true,			title = 'Mostrar xTSI',				group = globalGroupIndicat)

display_msOsc_MarketOSC					= input.bool	(defval = true,			title = 'Market Oscillator',		group = globalGroupIndicat)

display_adapMon_MFI						= input.bool	(defval = true,			title = 'Mostrar Ai Adaptative MFI', group = globalGroupIndicat)

display_DmiAdx_AdxHisto					= input.bool	(defval = true,			title = 'Mostrar ADX Histograma',	group = globalGroupIndicat)

display_MltObsPnlTimeFrPanel			= input.bool	(defval = true,			title = 'Mostrar Panel Trend',		group = globalGroupIndicat)

display_MltObsPnlIndicatPanel			= input.bool	(defval = true,			title = 'Mostrar Panel Multi Inc',	group = globalGroupIndicat)

showxTsiMuTSIDivSpeed					= input.string 	(defval = 'Fast',		title = 'Divergencia Speed',		group = globalGroupTimeframe,
			  options					=				['Fast', 'Slow', 'Div'])

strGlobalMultixTSISpeed					= input.string 	(defval = 'Dual',		title = 'xTSI Multiples',			group = globalGroupTimeframe,
			  options					=				['Div', 'Fast','Slow', 'Dual', 'All'])

strGlobalMultixTSIHighlight				= input.string 	(defval = 'Div',		title = 'xTSI Destacado',			group = globalGroupTimeframe,
			  options					=				['Div', 'Fast','Slow'])

strGlobalMultiHistogram					= input.string 	(defval = 'Dual',		title = 'Histograma',				group = globalGroupTimeframe,
			  options					=				['Mfi', 'Adx', 'Dual'])

strGlobalColorSelector					= input.string 	(defval = 'Allen',		title = 'Color Selector',			group = globalGroupTimeframe,
			  options					=				['Allen', 'Ultr', 'Light'])


/// Heikin Ashi ────────────────────────


showGlobal_HknAshi						= input.bool	(defval = true,			title = 'Activar Heikin Ashi',		group = 'Heikin Ashi mode',			tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close
gbl_Source_2							= showGlobal_HknAshi ? (heAsGblH + heAsGblL) / 2 : hl2
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3
// gbl_Source_4							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC + heAsGblO) / 4 : ohlc4


/// Switch ────────────────────────────


[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_extra,	_co_gbl_neutral]				= switch	strGlobalColorSelector
	'Allen'								=> [#33FFAC,	#CCF8FF,	#30D453,	#0061FE,	#E3FF53,	#CCF8FF]
	'Ultr'								=> [#98F1F4,	#E0D8CA,	#E3FF53,	#E0D8CA,	#CCF657,	#121F3D]
	'Light'								=> [#0061FE,	#FF4054,	#E6F7FF,	#121F3D,	#121F3D,	#FFF87C]


/// Colors ────────────────────────────

_co_gbl_long							= #30D453							// AllenGreen50
_co_gbl_short							= #EA1889							// AllenFucsia50

_co_gbl_white							= #E6F7FF							//	CitiAccentUltraLightBlue
_co_gbl_pink							= #FFB7FF							//	WavBehPink20
_co_gbl_sky								= #98F1F4							//	NexusSky
_co_gbl_mint							= #7AFFA1							//	SalesforceMint
_co_gbl_yellow							= #FDF43C							//	BrLiYel30
_co_gbl_lime							= #E3FF53							//	Ex1Lime
_co_gbl_blue							= #0035FF							//	ARoPrimary
_co_gbl_cocoa							= #E0D8CA							//	NetsuiteCocoa
_co_gbl_black							= #0C1633							//	PlatziBlue80
_co_gbl_light							= #FBFD73							//	BrLiYel10
_co_gbl_txt_dark						= #121F3D							//	PlatziBlue70
_co_gbl_txt_light						= #FFF87C							//	SalesforceYellow


// WiskAeroYellow							= #F9F940
// SalesforceLime							= #CCF657
// SalesforceLile							= #D5BEF2
// SalesforceOrange							= #FF8C7D
// SalesforceRed							= #FF4B4B
// SalesforceBlue							= #3F73F7
// Ex1Orange600								= #D93D04
// Ex1Red									= #A60303
// Ex1Wine									= #730202
// Ex1Teal									= #1CD8E1
// Ex1Ocean									= #00315e
// TaxusRed									= #F20505
// OsomeBlue								= #0061FE
// OsomeRed									= #FF4054


/// ＴＰＳ ―――――――――――――――――――――――――――――


type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'


/// ─── function tsi
FunGlobalCalcTSI(_speed, _x) =>
	_plus								= 50
	_source								= gbl_Source_C

	_long								= 25		// gbl_speed_long			= 6			// _smooth
	_short								= 0			// gbl_speed_short			= 13		// _smooth
	_signal								= 0			// gbl_speed_signal			= 5			// _smooth

	switch _speed
		'Fast' =>
			_short						:= 5
			_signal						:= 14

		'Slow' =>
			_short						:= 13
			_signal						:= 13

	_tsi								= _x * ta.tsi(_source, _short, _long) + _plus
	_tsi_ema							= ta.ema(_tsi, _signal)

	[_tsi, _tsi_ema]

/// ─── function timeframe conditional
FunGlobalCalculateTimeframeIf(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――


gblSource								= globalTypeOHL.new()


/// ＰＬＯＴ ―――――――――――――――――――――――――――


_plot_gbl_midline						= plot(50,			title = 'Equilibrio',		display = display.none,			editable = false)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════╗
/// ║	AI Adaptive Money Flow Index║
/// ╚═══════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――

/// Title Indicator ――――――――――――――――――――
adapMonGrpSet							= 'ADAPTATIVE MFI'

adapMonToolAdj							= 'Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos'
adapMonGrpLim							= 'Clustering Setting'
adapMonGrpApar							= 'Apariencia'

adapMonColorLong						= 				_co_gbl_buy
adapMonColorShort						= 				_co_gbl_sell
adapMonColorAux							= 				_co_gbl_white
adapMonColorDark						= 				_co_gbl_black

showadapMonVarADJ						= input.bool	(defval = true,				title = 'Mostrar MFI ajustado',								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
showadapMonStDev						= input.bool	(defval = false,			title = 'Mostrar Desviación Estándar',						group = adapMonGrpApar,		tooltip = adapMonToolAdj)

adapMonVarLENGTH						= input.int		(defval = 10,				title = 'Longitud MFI',						minval = 1,		group = adapMonGrpSet)	// 14
adapMonVarDataLength					= input.int		(defval = 300,				title = 'Nº de datos de entrenamiento',		minval = 1,		group = adapMonGrpLim)
adapMonVarIterations					= input.int		(defval = 5,				title = 'Nº de iteraciones por barra',		minval = 1,		group = adapMonGrpLim)

float adapMonVarOverbought				= 				75.0			// 80.0
float adapMonVarNeutral					= 				50.0
float adapMonVarOversold				= 				25.0			// 20.0

adapMonVarSRC							=				gbl_Source_3	// Fuente MFI


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――――――


adapMonVarOSC							= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB						= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE						= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS						= array.new_float(1, adapMonVarOversold)

adapMonArrNE_NEW						= array.avg(adapMonArrNE)
adapMonArrOB_NEW						= array.avg(adapMonArrOB)
adapMonArrOS_NEW						= array.avg(adapMonArrOS)

positionBetweenBands					= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL							= showadapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncStD							= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

ifAdapMonDesvStd						= showadapMonStDev ? adapMonFuncStD	: adapMonIfVAL

adapMonIfCOLOR100						= adapMonVarOSC > adapMonArrNE_NEW		? color.new(adapMonColorLong, 75)		: color.new(adapMonColorShort, 75)


/// ＰＬＯＴ ――――――――――――――――――――――――――


adapMonPlotIf							= strGlobalMultiHistogram  == 'Mfi' or strGlobalMultiHistogram == 'Dual' ? 'True' : 'False'

adapMonPlotMAIN							= plot	(adapMonPlotIf == 'True' and display_adapMon_MFI ? ifAdapMonDesvStd : na,						color = adapMonIfCOLOR100)
adapMonPlotMID							= plot	(adapMonPlotIf == 'True' and display_adapMon_MFI and showadapMonVarADJ ? adapMonVarNeutral	:	adapMonArrNE_NEW, color = adapMonIfCOLOR100)

// adapMonPlotStDev						= plot	(strGlobalMultiHistogram == 'Mfi' and display_adapMon_MFI ? adapMonFuncST : na,					color = adapMonIfCOLOR100)

/// ─── fill areas de tendencia
fill									(adapMonPlotMID, adapMonPlotMAIN,																		color = adapMonIfCOLOR100, title = 'Area de Tendencia')
fill									(adapMonPlotMID, adapMonPlotMAIN, ifAdapMonDesvStd, showadapMonVarADJ ? 50 : adapMonArrNE_NEW,			color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)
// fill									(adapMonPlotMID, adapMonPlotMAIN, ifAdapMonDesvStd, _plot_gbl_midline,									color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════╗
/// ║ 	Market Structure Oscilador	║
/// ╚═══════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


co_msOscBuy								= _co_gbl_up
co_msOscSell							= _co_gbl_dn
co_msOscLong							= _co_gbl_buy
co_msOscShort							= _co_gbl_sell

co_msOscRange							= _co_gbl_white
msOscilColorOsc							= _co_gbl_white
msOscilColorMid							= _co_gbl_white

display									= display.all - display.status_line	

/// Title Indicator ――――――――――――――――――――
msOsc_VarsGroup							= 'OSCILADOR MARKET STRUCTURE'

msOsc_WeightK1							= input.float	(defval = 1,					title = '  Escala Corta',					minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_WeightK2							= input.float	(defval = 3,					title = '  Escala Intermedia',				minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_WeightK3							= input.float	(defval = 2,					title = '  Escala Larga',					minval = 0,			group = msOsc_VarsGroup,	step=.1,		display = display)
msOsc_Norm_Smooth						= input.int		(defval = 4,					title = '  Oscilador Suavizado',			minval = 1,			group = msOsc_VarsGroup,					display = display)

msOsc_Group								= 'Oscilador Gradiente'
show_msOsc_OSC							= input			(defval = true,					title = 'Oscilador Cycle - Gradiente',							group = msOsc_Group)

cyc_Group								= 'Oscilador Cycle'
cycleOpt								= input			(defval = false,				title = 'Oscilador Cycle - Histograma',							group = cyc_Group)
cyc_Smooth								= input.int		(defval = 7,					title = '  Cycle Marca Longitud',			minval = 1,			group = cyc_Group,						display = display)

genericGroup							= 'Mk Osc en Gráfico'
msOnChart1								= input			(defval = true,					title = 'Estructura de rango Corto',							group = genericGroup)
msOnChartK1								= input.string	(defval = '····',				title = 'Linea  ',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K1',	display = display)
stMSLblK1T								= input.string	(defval = 'Disabled',			title = 'Tags  ',		options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K1',	display = display),	stMSLblK1 = stMSLblK1T == 'Enabled'

msOnChart2								= input			(defval = true,					title = 'Estructura de rango Intermedio',						group = genericGroup)
msOnChartK2								= input.string	(defval = '----',				title = 'Linea  ',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K2',	display = display)
stMSLblK2T								= input.string	(defval = 'Disabled',			title = 'Tags  ',		options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K2',	display = display),	stMSLblK2 = stMSLblK2T == 'Enabled'

msOnChart3								= input			(defval = true,					title = 'Estructura de rango Largo', 							group = genericGroup)
msOnChartK3								= input.string	(defval = '⎯⎯⎯⎯',				title = 'Linea  ',		options = ['⎯⎯⎯⎯', '----', '····'],		group = genericGroup,	inline = 'K3',	display = display)
stMSLblK3T								= input.string	(defval = 'Enabled',			title = 'Tags  ',		options = ['Enabled', 'Disabled'],		group = genericGroup,	inline = 'K3',	display = display),	stMSLblK3 = stMSLblK3T == 'Enabled'

msOscSizeBosChoch						= size.tiny


/// ＴＩＰＳ ―――――――――――――――――――――――――――


type SWINGS
	float	lastPrice
	float	midPrice
	float	prevPrice

	int		lastIndex
	int		midIndex
	int		prevIndex

	bool	isCrossed

type MS
	int		type						= 0


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――


var SWINGS stLow						= SWINGS.new()
var SWINGS stHigh						= SWINGS.new()
var MS stMS								= MS.new()

var SWINGS itLow						= SWINGS.new()
var SWINGS itHigh						= SWINGS.new()
var MS itMS								= MS.new()

var SWINGS ltLow						= SWINGS.new()
var SWINGS ltHigh						= SWINGS.new()
var MS ltMS								= MS.new()


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


Fun_msOsc_queryPatterns(lastPrice, midPrice, prevPrice, isSwingHigh) =>
	if isSwingHigh
		prevPrice < midPrice and midPrice >= lastPrice
	else
		prevPrice > midPrice and midPrice <= lastPrice

method Fun_msOsc_queryPatterns(SWINGS this, isSwingHigh) =>
	if isSwingHigh
		this.prevPrice < this.midPrice and this.midPrice >= this.lastPrice
	else
		this.prevPrice > this.midPrice and this.midPrice <= this.lastPrice

method Fun_msOsc_updatePattern(SWINGS this, _price, _index) =>
	this.isCrossed					:= false
	this.prevPrice					:= this.midPrice, this.midPrice := this.lastPrice, this.lastPrice := _price
	this.prevIndex					:= this.midIndex, this.midIndex := this.lastIndex, this.lastIndex := _index

method Fun_msOsc_setType(MS this, value) =>
	this.type						:= value

Fun_msOsc_normalize(_buy, _sell, _smooth) =>
	var _os							= 0
	var float _max					= na
	var float _min					= na
	_os := _buy ? 1 : _sell ? -1 : _os
	
	_max := _os > _os[1] ? gblSource.C : _os < _os[1] ? _max : math.max(gblSource.C, _max)
	_min := _os < _os[1] ? gblSource.C : _os > _os[1] ? _min : math.min(gblSource.C, _min)

	ta.sma((gblSource.C - _min)/(_max - _min), _smooth) * 100

Fun_msOsc_shortMarketStructure() => 

	_bull							= false
	_bear							= false

	if Fun_msOsc_queryPatterns(gblSource.H, gblSource.H[1], gblSource.H[2], true )
		stHigh.Fun_msOsc_updatePattern(gblSource.H[1], bar_index[1])
		stHigh.isCrossed			:= false

	if gblSource.C > stHigh.lastPrice and not stHigh.isCrossed
		stHigh.isCrossed			:= true
		_bull						:= true

	if Fun_msOsc_queryPatterns(gblSource.L , gblSource.L[1] , gblSource.L[2] , false) 
		stLow.isCrossed				:= false
		stLow.Fun_msOsc_updatePattern(gblSource.L[1], bar_index[1])

	if gblSource.C < stLow.lastPrice and not stLow.isCrossed
		stLow.isCrossed				:= true
		_bear						:= true

	Fun_msOsc_normalize(_bull, _bear, msOsc_Norm_Smooth)

Fun_msOsc_marketStructure(SWINGS hSwingHigh, SWINGS hSwingLow, SWINGS lSwingHigh, SWINGS lSwingLow) => 

	_bull							= false
	_bear							= false 

	cSwingHigh						= lSwingHigh.Fun_msOsc_queryPatterns(true)

	if cSwingHigh and cSwingHigh != cSwingHigh[1]
		hSwingHigh.Fun_msOsc_updatePattern(lSwingHigh.midPrice, lSwingHigh.midIndex)
		hSwingHigh.isCrossed		:= false

	if gblSource.C > hSwingHigh.lastPrice and not hSwingHigh.isCrossed
		hSwingHigh.isCrossed		:= true
		_bull						:= true

	cSwingLow						= lSwingLow.Fun_msOsc_queryPatterns(false)

	if cSwingLow and cSwingLow != cSwingLow[1]
		hSwingLow.Fun_msOsc_updatePattern(lSwingLow.midPrice, lSwingLow.midIndex)
		hSwingLow.isCrossed			:= false

	if gblSource.C < hSwingLow.lastPrice and not hSwingLow.isCrossed
		hSwingLow.isCrossed			:= true
		_bear						:= true

	Fun_msOsc_normalize(_bull, _bear, msOsc_Norm_Smooth)

Fun_msOsc_collectData() => [Fun_msOsc_shortMarketStructure(), Fun_msOsc_marketStructure(itHigh, itLow, stHigh, stLow), Fun_msOsc_marketStructure(ltHigh, ltLow, itHigh, itLow)]


/// ＣＡＬＣＵＬＡＴＩＯＮＳ ――――――――――――


if msOnChart1
	if gblSource.C > stHigh.lastPrice and not stHigh.isCrossed

		line.new(stHigh.lastIndex, stHigh.lastPrice, gblSource.I, stHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK1),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK1
			box.new(stHigh.lastIndex, stHigh.lastPrice, gblSource.I, stHigh.lastPrice,
					  border_color		= color(na),
					  text				= stMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			stMS.Fun_msOsc_setType(1)

	if gblSource.C < stLow.lastPrice and not stLow.isCrossed

		line.new(stLow.lastIndex, stLow.lastPrice, gblSource.I, stLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK1),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK1
			box.new(stLow.lastIndex, stLow.lastPrice, gblSource.I, stLow.lastPrice,
					  border_color		= color(na),
					  text				= stMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			stMS.Fun_msOsc_setType(-1)

if msOnChart2
	if gblSource.C > itHigh.lastPrice and not itHigh.isCrossed

		line.new(itHigh.lastIndex, itHigh.lastPrice, gblSource.I, itHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK2),
					  width				= 1,
					  force_overlay		= true)
		if stMSLblK2
			box.new(itHigh.lastIndex, itHigh.lastPrice, gblSource.I, itHigh.lastPrice,
					  border_color		= color(na),
					  text				= itMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			itMS.Fun_msOsc_setType(1)

	if gblSource.C < itLow.lastPrice and not itLow.isCrossed

		line.new(itLow.lastIndex, itLow.lastPrice, gblSource.I, itLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK2),
					  width				= 1,
					  force_overlay		= true)
		if stMSLblK2
			box.new(itLow.lastIndex, itLow.lastPrice, gblSource.I, itLow.lastPrice,
					  border_color		= color(na),
					  text				= itMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			itMS.Fun_msOsc_setType(-1)

if msOnChart3
	if gblSource.C > ltHigh.lastPrice and not ltHigh.isCrossed

		line.new(ltHigh.lastIndex, ltHigh.lastPrice, gblSource.I, ltHigh.lastPrice,
					  color				= color.new(co_msOscLong, 35),
					  style				= FunGlobalLineStyle(msOnChartK3),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK3
			box.new(ltHigh.lastIndex, ltHigh.lastPrice, gblSource.I, ltHigh.lastPrice,
					  border_color		= color(na),
					  text				= ltMS.type < 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscLong, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_bottom,
					  force_overlay		= true)

			ltMS.Fun_msOsc_setType(1)

	if gblSource.C < ltLow.lastPrice and not ltLow.isCrossed

		line.new(ltLow.lastIndex, ltLow.lastPrice, gblSource.I, ltLow.lastPrice,
					  color				= color.new(co_msOscShort, 35),
					  style				= FunGlobalLineStyle(msOnChartK3),
					  width				= 1,
					  force_overlay		= true)

		if stMSLblK3
			box.new(ltLow.lastIndex, ltLow.lastPrice, gblSource.I, ltLow.lastPrice,
					  border_color		= color(na),
					  text				= ltMS.type > 0 ? 'CHoCH' : 'BoS',
					  text_color		= color.new(co_msOscShort, 35),
					  text_size			= msOscSizeBosChoch,
					  text_halign		= text.align_left,
					  text_valign		= text.align_top,
					  force_overlay		= true)

			ltMS.Fun_msOsc_setType(-1)


/// ＯＳＣ ――――――――――――――――――――――――――――


/// ＰＬＯＴ ――――――――――――――――――――――――――


/// ─── Lineal

[stValue1, stValue2, stValue3] = Fun_msOsc_collectData()

/// ─── Oscilador
msOSC				= (msOsc_WeightK1 * nz(stValue1, 0) + msOsc_WeightK2 * nz(stValue2, 0) + msOsc_WeightK3 * nz(stValue3, 0)) / (msOsc_WeightK1 * (na(stValue1) ? 0 : 1) + msOsc_WeightK2 * (na(stValue2) ? 0 : 1) + msOsc_WeightK3 * (na(stValue3) ? 0 : 1))
msPlot				= plot(display_msOsc_MarketOSC and show_msOsc_OSC ? msOSC : na,	'Oscilador Market Structure',			color.from_gradient(msOSC, 0, 100, color.new(co_msOscSell, 0), color.new(co_msOscBuy, 0)), 1,	display = display)

cycleFast			= cycleOpt ? msOSC - ta.ema(msOSC, cyc_Smooth) + 50 : 50
plotcandle			(50., 50., 50., cycleFast,										'Histograma Cycle',						cycleFast > 50 ? color.new(co_msOscBuy, 20) : color.new(co_msOscSell, 20),	display = display,	bordercolor = cycleOpt ? cycleFast > 50 ? color.new(co_msOscBuy, 20) : color.new(co_msOscSell, 20) : color.gray)

fill				(msPlot, _plot_gbl_midline, 100, cycleOpt ? 60 : 50, top_color = color.new(co_msOscBuy,   0), bottom_color = color.new(co_msOscBuy, 100), title = 'Bullish Gradient Fill')
fill				(msPlot, _plot_gbl_midline,  cycleOpt ? 40 : 50,  0, top_color = color.new(co_msOscSell, 100), bottom_color = color.new(co_msOscSell,   0), title = 'Bearish Gradient Fill')


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

// varip float volBl = na
// varip float volBr = na


// [bV, sV, nV, tV, aCl] = request.security_lower_tf(
// 		  syminfo.tickerid,  res, 
// 		  [
// 		  close >  open ? volume : 0,
// 		  close <  open ? volume : 0,
// 		  close == open ? volume : 0,
// 		  volume,
// 		  close
// 		  ]
// 		  )


// ltf_Vup = bV.sum() 
// ltf_Vdn = sV.sum() 

// bullV = ltf_Vup
// bearV = ltf_Vdn

// abs   = math.abs(open  - close)
// min   = math.min(open  , close)
// max   = math.max(open  , close)
// avg   = math.avg(open  , close)
// vol   =          bullV + bearV
// delta =          bullV - bearV

// norm  = delta / volume
// aNorm = math.abs(norm)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════╗
/// ║	Adx Histogram           	║
/// ╚═══════════════════════════════╝


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


colorxAdxDiHi_Buy						= _co_gbl_buy
colorxAdxDiHi_Sell						= _co_gbl_sell
colorxAdxDiHi_Extra						= _co_gbl_extra

/// Title Indicator ――――――――――――――――――――
AdxDiHiGroupVars						= 'ADX HISTOGRAM 50'

adxDiHi_Length							= input.int(defval = 14,		title = 'Longitud Adx',			group = AdxDiHiGroupVars)
adxDiHi_Th								= input.int(defval = 50,		title = 'Umbral',				group = AdxDiHiGroupVars)


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


xAdxDiHi_TrueRange						= math.max(math.max(gbl_Source_H				- gbl_Source_L, math.abs(gbl_Source_H			- nz(gbl_Source_C[1]))),		math.abs(gbl_Source_L		- nz(gbl_Source_C[1])))
xAdxDiHi_DirectMovePlus					= gbl_Source_H			- nz(gbl_Source_H[1])	> nz(gbl_Source_L[1])	- gbl_Source_L			? math.max(gbl_Source_H			- nz(gbl_Source_H[1]), 0)	: 0
xAdxDiHi_DirectMoveMinus				= nz(gbl_Source_L[1])	- gbl_Source_L			> gbl_Source_H			- nz(gbl_Source_H[1])	? math.max(nz(gbl_Source_L[1])	- gbl_Source_L, 0)			: 0

var float xAdxDiHi_SmoothTrueRange		= na
var float xAdxDiHi_SmoothDirectMovePlus	= na
var float xAdxDiHi_SmoothDirectMoveMinus= na

xAdxDiHi_SmoothTrueRange				:= na(xAdxDiHi_SmoothTrueRange)			? xAdxDiHi_TrueRange		: xAdxDiHi_SmoothTrueRange			- (xAdxDiHi_SmoothTrueRange			/ adxDiHi_Length)	+ xAdxDiHi_TrueRange
xAdxDiHi_SmoothDirectMovePlus			:= na(xAdxDiHi_SmoothDirectMovePlus)	? xAdxDiHi_DirectMovePlus	: xAdxDiHi_SmoothDirectMovePlus		- (xAdxDiHi_SmoothDirectMovePlus	/ adxDiHi_Length)	+ xAdxDiHi_DirectMovePlus
xAdxDiHi_SmoothDirectMoveMinus			:= na(xAdxDiHi_SmoothDirectMoveMinus)	? xAdxDiHi_DirectMoveMinus	: xAdxDiHi_SmoothDirectMoveMinus	- (xAdxDiHi_SmoothDirectMoveMinus	/ adxDiHi_Length)	+ xAdxDiHi_DirectMoveMinus


/// ＣＡＬＣＵＬＡＴＩＯＮＳ ―――――――――――――


xAdxDiHi_DIPlus							= xAdxDiHi_SmoothDirectMovePlus				/ xAdxDiHi_SmoothTrueRange		* 100
xAdxDiHi_DIMinus						= xAdxDiHi_SmoothDirectMoveMinus			/ xAdxDiHi_SmoothTrueRange		* 100
xAdxDiHi_DX								= math.abs(xAdxDiHi_DIPlus					- xAdxDiHi_DIMinus)		/ (xAdxDiHi_DIPlus		+ xAdxDiHi_DIMinus)		* 100
xAdxDiHi_ADX							= ta.sma(xAdxDiHi_DX,						adxDiHi_Length)

xAdxDiHi_Didi							= adxDiHi_Th		+ (xAdxDiHi_DIPlus		- xAdxDiHi_DIMinus)

xAdxDiHi_CR								= 
					  xAdxDiHi_Didi		>=	adxDiHi_Th + 40		?	10	:
					  xAdxDiHi_Didi		>=	adxDiHi_Th + 30		?	24	:
					  xAdxDiHi_Didi		>=	adxDiHi_Th + 20		?	38	:
					  xAdxDiHi_Didi		>=	adxDiHi_Th + 10		?	52	:
					  xAdxDiHi_Didi		>=	adxDiHi_Th + 5		?	66	:
					  80
xAdxDiHi_CG								= 
					  xAdxDiHi_Didi		<=	adxDiHi_Th - 40		?	10	:
					  xAdxDiHi_Didi		<=	adxDiHi_Th - 30		?	24	:
					  xAdxDiHi_Didi		<=	adxDiHi_Th - 20		?	38	:
					  xAdxDiHi_Didi		<=	adxDiHi_Th - 10		?	52	:
					  xAdxDiHi_Didi		<=	adxDiHi_Th - 5		?	66	:
					  80


/// ＰＬＯＴ ―――――――――――――――――――――――――――


adxDiHiPlotIf							= strGlobalMultiHistogram  == 'Adx' or strGlobalMultiHistogram == 'Dual' ? 'True' : 'False'

plot(adxDiHiPlotIf == 'True' and display_DmiAdx_AdxHisto	? xAdxDiHi_Didi	: na,
	  style								= plot.style_area,
	//   style								= plot.style_columns,
	  linewidth							= 2,
	  color								= xAdxDiHi_Didi			>= adxDiHi_Th	?
		  color.new(colorxAdxDiHi_Buy,	xAdxDiHi_CR)	:
		  color.new(colorxAdxDiHi_Sell,	xAdxDiHi_CG),
	  histbase							= adxDiHi_Th,
	  title								= 'DI')


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════╗
/// ║	Tsi Multi Speed				║
/// ║	Tsi & Divergences			║
/// ║	@	Allen.					║
/// ╚═══════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


/// ─── Colors ───

co_xTsiMuTSIBaseUp						= _co_gbl_long
co_xTsiMuTSIBaseDn						= _co_gbl_short

co_xTsiMuTSIFastUp						= _co_gbl_lime
co_xTsiMuTSIFastDn						= _co_gbl_light

co_xTsiMuTSIMainLong					= _co_gbl_buy
co_xTsiMuTSIMainShort					= _co_gbl_sell

co_xTsiMuText							= color.new(_co_gbl_txt_dark,		0)

/// Title Indicator ――――――――――――――――――――
xTsiMu_GroupInput						= 'xTSI Ultra'

showxTsiMuTSIDiverg						= input.bool	(defval = true,			title = 'Divergencias',				group = xTsiMu_GroupInput)

ixTsiMu_RSILength						= 14
ixTsiMu_Signal							= 5


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


/// function calculate TSI div
FunTsiMuDiCalc2SmoothTsiDiv(_source) =>
	_long								= 6
	_short								= 13

	_fist_smooth							= ta.ema(_source, _long)
	ta.ema(_fist_smooth, _short)

FunTsiMuDiCalcTSIdiv(_source) =>
	_change								= ta.change(_source)
	_x									= 110
	_plus								= 50

	_smooth								= FunTsiMuDiCalc2SmoothTsiDiv(_change)
	_smooth_abs							= FunTsiMuDiCalc2SmoothTsiDiv(math.abs(_change))
	_x * (_smooth / _smooth_abs) + _plus


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――

/// RSI

ixTsiMu_RSI								= ta.rsi(gbl_Source_C, ixTsiMu_RSILength)


/// TSI

/// instance function Tsi fast
[ixTsiMuCalcTsiFast, ixTsiMuCalcEmaFast]= FunGlobalCalcTSI('Fast', 160)

/// instance function Tsi slow
[ixTsiMuCalcTsiSlow, ixTsiMuCalcEmaSlow]= FunGlobalCalcTSI('Slow', 180)

/// TSI div
ixTsiMuCalcTsiDiv						= FunTsiMuDiCalcTSIdiv(gbl_Source_C)
ixTsiMuCalcEmaDiv						= ta.ema(ixTsiMuCalcTsiDiv, ixTsiMu_Signal)

/// ─── plot color fast
insxTsiMuShowColorFast					= ixTsiMuCalcTsiFast	> ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastUp	: ixTsiMuCalcTsiFast	<= ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastDn	: na

/// ─── plot color slow
insxTsiMuShowColorSlow					= ixTsiMuCalcTsiSlow	> ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseUp	: ixTsiMuCalcTsiSlow	<= ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseDn	: na

/// ─── plot color div
insxTsiMuShowColorDiv					= ixTsiMuCalcTsiDiv		> ixTsiMuCalcEmaDiv		? co_xTsiMuTSIBaseUp	: ixTsiMuCalcTsiDiv		<= ixTsiMuCalcEmaDiv	? co_xTsiMuTSIBaseDn	: na

/// ＰＬＯＴ ―――――――――――――――――――――――――――


/// plot line overbought/oversold
plot_xTsiMuTsi_fpLine					= plot(display_xTsiMu_TSI ? 110 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	60,	100,	color.new(_co_gbl_black, 70),	color.new(_co_gbl_sell, 10)),						linewidth = 6)
insxTsiMuTsiPlotDnLine					= plot(display_xTsiMu_TSI ? -10 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	0,	40,		color.new(_co_gbl_buy, 10),		color.new(_co_gbl_black, 70)),						linewidth = 6)


///  ――――――――――――――――――――――――――――――――――


/// plot TSI show
tsiMuDiIfTsiMulti						= strGlobalMultixTSISpeed  == 'All'		?	'True' : 'False'
tsiMuDiIfTsiDual						= strGlobalMultixTSISpeed  == 'Dual'	?	'True' : 'False'
tsiMuDiIfTsidiv							= strGlobalMultixTSISpeed  == 'Div'		or	tsiMuDiIfTsiMulti == 'True' 	? 'True' : 'False'
tsiMuDiIfTsislow						= strGlobalMultixTSISpeed  == 'Slow'	or	tsiMuDiIfTsiMulti == 'True' 	? 'True' : 'False'
tsiMuDiIfTsifast						= strGlobalMultixTSISpeed  == 'Fast'	or	tsiMuDiIfTsiMulti == 'True' 	? 'True' : 'False'

/// plot TSI line/fill color
tsiMuDiIfTsiColorDiv					= strGlobalMultixTSIHighlight  == 'Div'		? insxTsiMuShowColorDiv		: _co_gbl_light
tsiMuDiIfTsiOpacityDiv					= strGlobalMultixTSIHighlight  == 'Div'		? 20	: 50
tsiMuDiIfTsiColorDivline				= strGlobalMultixTSIHighlight  == 'Div'		? color.new(insxTsiMuShowColorDiv, tsiMuDiIfTsiOpacityDiv)		: color.new(_co_gbl_light, tsiMuDiIfTsiOpacityDiv)

tsiMuDiIfTsiColorSlow					= strGlobalMultixTSIHighlight  == 'Slow'	? insxTsiMuShowColorSlow	: _co_gbl_neutral
tsiMuDiIfTsiOpacitySlow					= strGlobalMultixTSIHighlight  == 'Slow'	? 20	: 50
tsiMuDiIfTsiColorSlowline				= strGlobalMultixTSIHighlight  == 'Slow'	? color.new(insxTsiMuShowColorSlow, tsiMuDiIfTsiOpacityDiv)		: color.new(_co_gbl_neutral, tsiMuDiIfTsiOpacityDiv)

tsiMuDiIfTsiColorFast					= strGlobalMultixTSIHighlight  == 'Fast'	? insxTsiMuShowColorFast	: _co_gbl_neutral
tsiMuDiIfTsiOpacityFast					= strGlobalMultixTSIHighlight  == 'Fast'	? 20	: 50
tsiMuDiIfTsiColorFastline				= strGlobalMultixTSIHighlight  == 'Fast'	? color.new(insxTsiMuShowColorFast, tsiMuDiIfTsiOpacityFast)		: color.new(_co_gbl_neutral, tsiMuDiIfTsiOpacityFast)


/// plot TSI fast
plot_xTsiMuTsi_fast						= plot(display_xTsiMu_TSI and tsiMuDiIfTsifast == 'True'  ? ixTsiMuCalcTsiFast	: na,										color = tsiMuDiIfTsiColorFastline,		linewidth = 2)		//	plot TsiSI
plot_xTsiMuEma_fast						= plot(display_xTsiMu_TSI and tsiMuDiIfTsifast == 'True'  ? ixTsiMuCalcEmaFast	: na,										color = tsiMuDiIfTsiColorFastline,		linewidth = 1)		//	plot EMA

/// fill fast
fill(plot_xTsiMuTsi_fast, plot_xTsiMuEma_fast,					color = color.new(tsiMuDiIfTsiColorFast, 85))

/// plot TSI slow
plot_xTsiMuTsi_slow						= plot(display_xTsiMu_TSI and tsiMuDiIfTsislow == 'True'  or tsiMuDiIfTsiDual == 'True'  ? ixTsiMuCalcTsiSlow	: na,		color = tsiMuDiIfTsiColorSlowline,			linewidth = 2)		//	plot TsiSI
plot_xTsiMuEma_slow						= plot(display_xTsiMu_TSI and tsiMuDiIfTsislow == 'True'  or tsiMuDiIfTsiDual == 'True'  ? ixTsiMuCalcEmaSlow	: na,		color = tsiMuDiIfTsiColorSlowline,			linewidth = 2)		//	plot EMA

/// fill slow
fill(plot_xTsiMuTsi_slow, plot_xTsiMuEma_slow,					color = color.new(tsiMuDiIfTsiColorSlow, 50))


///  ――――――――――――――――――――――――――――――――――

/// plot TSI div
plot_xTsiMuTsi_div						= plot(display_xTsiMu_TSI and tsiMuDiIfTsidiv == 'True' or tsiMuDiIfTsiDual == 'True' ? ixTsiMuCalcTsiDiv	: na,			color = tsiMuDiIfTsiColorDivline,		linewidth = 2)		//	plot TsiSI
plot_xTsiMuEma_div						= plot(display_xTsiMu_TSI and tsiMuDiIfTsidiv == 'True' or tsiMuDiIfTsiDual == 'True' ? ixTsiMuCalcEmaDiv	: na,			color = tsiMuDiIfTsiColorDivline,		linewidth = 2)		//	plot EMA

/// fill div
fill(plot_xTsiMuTsi_div, plot_xTsiMuEma_div,					color = color.new(tsiMuDiIfTsiColorDiv, 50))

/// plotchar crossover/crossunder
xTsiMuTsi_crossover_fast				= display_xTsiMu_TSI and ta.crossover(ixTsiMuCalcTsiFast,		ixTsiMuCalcEmaFast)		? ixTsiMuCalcTsiFast[1]		: na
xTsiMuTsi_crossover_slow				= display_xTsiMu_TSI and ta.crossover(ixTsiMuCalcTsiSlow,		ixTsiMuCalcEmaSlow)		? ixTsiMuCalcTsiSlow[1]		: na
xTsiMuTsi_crossover_div					= display_xTsiMu_TSI and ta.crossover(ixTsiMuCalcTsiDiv,		ixTsiMuCalcEmaDiv)		? ixTsiMuCalcTsiDiv[1]		: na

xTsiMuTsi_crossunder_fast				= display_xTsiMu_TSI and ta.crossunder(ixTsiMuCalcTsiFast,		ixTsiMuCalcEmaFast)		? ixTsiMuCalcTsiFast[1]		: na
xTsiMuTsi_crossunder_slow				= display_xTsiMu_TSI and ta.crossunder(ixTsiMuCalcTsiSlow,		ixTsiMuCalcEmaSlow)		? ixTsiMuCalcTsiSlow[1]		: na
xTsiMuTsi_crossunder_div				= display_xTsiMu_TSI and ta.crossunder(ixTsiMuCalcTsiDiv,		ixTsiMuCalcEmaDiv)		? ixTsiMuCalcTsiDiv[1]		: na

plotchar(showxTsiMuTSIDivSpeed	== 'Fast' ? xTsiMuTsi_crossover_fast : showxTsiMuTSIDivSpeed	== 'Slow' ? xTsiMuTsi_crossover_slow : xTsiMuTsi_crossover_div,
		  title							= "cross ▲",
		  char							= "✪", 
		  location						= location.absolute, 
		  color							= color.new(co_xTsiMuTSIMainLong, 10),
		  size							= size.tiny, 
		  offset						= -1)

plotchar(showxTsiMuTSIDivSpeed	== 'Fast' ? xTsiMuTsi_crossunder_fast : showxTsiMuTSIDivSpeed	== 'Slow' ? xTsiMuTsi_crossunder_slow : xTsiMuTsi_crossunder_div,
		  title							= "cross ▼",
		  char							= "✪", 
		  location						= location.absolute, 
		  color							= color.new(co_xTsiMuTSIMainShort, 10), 
		  size							= size.tiny, 
		  offset						= -1)

///  ――――――――――――――――――――――――――――――――――


vxTsiMuLBR								= 5				//	Corrección a la derecha
vxTsiMuLBL								= 5				//	Corrección a la izquierda

vxTsiMu_speed							= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow				: showxTsiMuTSIDivSpeed == 'Fast' ?	ixTsiMuCalcTsiFast				: ixTsiMuCalcTsiDiv
vxTsiMu_speed_back						= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow[vxTsiMuLBR]	: showxTsiMuTSIDivSpeed == 'Fast' ?	ixTsiMuCalcTsiFast[vxTsiMuLBR]	: ixTsiMuCalcTsiDiv[vxTsiMuLBR]

insTsiMuDiPLFound						= na(ta.pivotlow(vxTsiMu_speed,		vxTsiMuLBL,	vxTsiMuLBR)) ? false : true
insTsiMuDiPHFound						= na(ta.pivothigh(vxTsiMu_speed,	vxTsiMuLBL,	vxTsiMuLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	_range_upper						= 30			//	Rango de corrección maximo
	_range_lower						= 2				//	Rango de corrección minimo

	_bars_since							= ta.barssince(cond == true)

	_range_lower	<=	_bars_since	and	_bars_since	<=	_range_upper


/// Compra regular ────────────────────


/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= vxTsiMu_speed_back				> ta.valuewhen(insTsiMuDiPLFound, vxTsiMu_speed_back, 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICELL							= low[vxTsiMuLBR]					< ta.valuewhen(insTsiMuDiPLFound, low[vxTsiMuLBR], 1)
tsiDiInsBULLCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

plotshape(showxTsiMuTSIDiverg			and	tsiDiInsBULLCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Buy ',
			  size						= size.auto,
			  style						= shape.labelup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Compra scalp ──────────────────────


/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= vxTsiMu_speed_back				< ta.valuewhen(insTsiMuDiPLFound, vxTsiMu_speed_back, 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICEHL							= low[vxTsiMuLBR]					> ta.valuewhen(insTsiMuDiPLFound, low[vxTsiMuLBR], 1)
tsiDiInsHiddenBullCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

plotshape(showxTsiMuTSIDiverg			and tsiDiInsHiddenBullCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Compra trend',
			  text						= ' ▲ ',
			  size						= size.auto,
			  style						= shape.labelup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 50),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta regular ─────────────────────


/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= vxTsiMu_speed_back				< ta.valuewhen(insTsiMuDiPHFound, vxTsiMu_speed_back, 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICEHH							= high[vxTsiMuLBR]					> ta.valuewhen(insTsiMuDiPHFound, high[vxTsiMuLBR], 1)
tsiDiInsBEARCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

plotshape(showxTsiMuTSIDiverg			and tsiDiInsBEARCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Sell ',
			  size						= size.auto,
			  style						= shape.labeldown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta scalp ───────────────────────


/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= vxTsiMu_speed_back				> ta.valuewhen(insTsiMuDiPHFound, vxTsiMu_speed_back, 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICELH							= high[vxTsiMuLBR]					< ta.valuewhen(insTsiMuDiPHFound, high[vxTsiMuLBR], 1)
tsiDiInsHiddenBearCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

plotshape(showxTsiMuTSIDiverg			and tsiDiInsHiddenBearCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Venta trend',
			  text						= ' ▼ ',
			  size						= size.auto,
			  style						= shape.labeldown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 50),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════╗
/// ║	Panel Multi Timeframe		║
/// ║	Panel Multi Indicator		║
/// ║	@	Allen.					║
/// ╚═══════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


co_MltObsPnl_Buy						= _co_gbl_long
co_MltObsPnl_Sell						= _co_gbl_short
co_MltObsPnl_Neutral					= _co_gbl_neutral
co_MltObsPnl_White						= _co_gbl_white
co_MltObsPnl_Black						= _co_gbl_black
co_MltObsPnl_TextDark					= _co_gbl_txt_dark
co_MltObsPnl_TextLight					= _co_gbl_txt_light
co_MltObsPnl_TiPnBg						= _co_gbl_yellow

/// Title Indicator ――――――――――――――――――――
MltObsPnlGroupTimeframes				=				'xMULTI TREND PANEL'

display_MltObsPnlMultiTFIndicPanel		= input.bool	(true,				title = 'Mostrar Trend Panel',		group = MltObsPnlGroupTimeframes,		inline = 'showsignals')

display_MltObsPnlCalcTimeTicker			= input.bool	(true,				title = 'Mostrar Ticker Panel',		group = MltObsPnlGroupTimeframes,		inline = 'showsignals')

show_MltObsPnlColumn_Now				= input.bool	(true,				title = 'Timeframe',				group = MltObsPnlGroupTimeframes,		inline = 'tf amplit')

show_MltObsPnlRow_DELTA					= input.bool	(true,				title = 'Delta',					group = MltObsPnlGroupTimeframes,		inline = 'Indicators')
show_MltObsPnlRow_OSC					= input.bool	(true,				title = 'Oscillator',				group = MltObsPnlGroupTimeframes,		inline = 'Indicators')
show_MltObsPnlRow_TSIdiv				= input.bool	(true,				title = 'TSI ',						group = MltObsPnlGroupTimeframes,		inline = 'Indicators')
show_MltObsPnlRow_TSIslow				= input.bool	(true,				title = 'Tsi Slow',					group = MltObsPnlGroupTimeframes,		inline = 'Indicators 2')
show_MltObsPnlRow_TSIfast				= input.bool	(true,				title = 'Tsi Fast',					group = MltObsPnlGroupTimeframes,		inline = 'Indicators 2')
show_MltObsPnlRow_RSI					= input.bool	(false,				title = 'Rsi',						group = MltObsPnlGroupTimeframes,		inline = 'Indicators 2')
show_MltObsPnlRow_MFI					= input.bool	(true,				title = 'Mfi',						group = MltObsPnlGroupTimeframes,		inline = 'Indicators 2')
show_MltObsPnlRow_ADX					= input.bool	(true,				title = 'Adx',						group = MltObsPnlGroupTimeframes,		inline = 'Indicators 2')

MltObsPnl_PosiVert						= input.string	(defval = 'Abajo',	title = ' Y: ',						group = MltObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['Arriba', 'Abajo'])
MltObsPnl_PosiHoriz						= input.string	(defval = 'Derecha',	title = ' X: ',					group = MltObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['Izquierda', 'Centro','Derecha'])

/// Title Indicator ――――――――――――――――――――
MltObsPnlGroupIndicat					=				'PANEL MULTI INDiCATOR'

show_MltObsPnlIndicatDelta				= input.bool	(true,				title = 'Delta',		 			group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatTSIdiv				= input.bool	(true,				title = 'TSI  ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatTSIfast			= input.bool	(true,				title = 'Fast ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatTSIslow			= input.bool	(true,				title = 'Slow ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatMtf				= input.bool	(true,				title = 'Mtf  ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatRsi				= input.bool	(false,				title = 'Rsi  ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatMfi				= input.bool	(true,				title = 'Mfi  ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')
show_MltObsPnlIndicatAdx				= input.bool	(true,				title = 'Adx  ',					group = MltObsPnlGroupIndicat,			inline = 'multi indic')

MltObsPnl_LocatMlIndVert				= input.string	(defval = 'Medio',	title = ' Y: ',						group = MltObsPnlGroupIndicat,			inline = 'ubic signal',
		  options						=				['Arriba', 'Medio','Abajo'])
MltObsPnl_LocatMlIndHoriz				= input.string	(defval = 'Derecha',title = ' X: ',						group = MltObsPnlGroupIndicat,			inline = 'ubic signal',
		  options						=				['Izquierda', 'Derecha'])

stMltObsPnl_TextSize					= input.string	(defval = 'Normal',	title = 'Tamaño de texto',
		  options						=				['Mini', 'Pequeño', 'Normal', 'Grande', 'Enorme', 'Auto'])


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――


/// ＣＡＬＣＵＬＡＴＩＯＮＳ ―――――――――――――


MltObsPnl_Middle						= adxDiHi_Th

// MltObsPnl_DELTA							= vVidya_delta_volume					//	Delta Volume
// MltObsPnl_DELTA_f						= vVidya_delta_float					//	Delta float
MltObsPnl_OSC							= msOSC									//	Market Oscillator

MltObsPnl_TSI_fast						= ixTsiMuCalcTsiFast					//	Tsi Fast		Fast/Slow
MltObsPnl_TSI_slow						= ixTsiMuCalcTsiSlow					//	Tsi Slow		Fast/Slow
MltObsPnl_EMA_slow						= ixTsiMuCalcEmaSlow					//	Tsi Ema Slow	Fast/Slow

MltObsPnl_TSI_div						= ixTsiMuCalcTsiDiv						//	Tsi diverg

MltObsPnl_RSI							= ixTsiMu_RSI							//	Rsi
MltObsPnl_MFI							= ifAdapMonDesvStd						//	Mfi
MltObsPnl_ADX							= xAdxDiHi_Didi							//	Adx
// MltObsPnl_ADX							= iDmiAdx_DIFF


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――

/// ─── TRENDS INDICATORS

/// ─── New table trends
var vTsiPnlTableTrend					= table.new(
	  position							= FunGlobalVertical(MltObsPnl_PosiVert) + '_' + FunGlobalHorizontal(MltObsPnl_PosiHoriz),
	  columns							= 3,
	  rows								= 8,
	  border_width						= 2,
	  frame_color						= color.new(co_MltObsPnl_Black,		70),
	  force_overlay						= true)

/// ─── Function head trends
FunMltObsPnlCalcCellHead(_col, _row, _title) =>
	_bgcolor							= _co_gbl_black
	_opacity							= 60
	_cell_text							= _title
	_txtcolor							= co_MltObsPnl_TextLight
	_txtsize							= FunGlobalTextSize(stMltObsPnl_TextSize)

	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
		  bgcolor						= color.new(_bgcolor,	_opacity),
		  text_size						= _txtsize,
		  text_color					= _txtcolor
		  )

/// ─── Function cell trends
FunMltObsPnlCalcTrends(_col, _row, _ticker) =>
	_cell_text							= _ticker
	_col_up								= co_MltObsPnl_Buy
	_col_dn								= co_MltObsPnl_Sell

	_cell_color							= _ticker == 'Buy' ? _col_up : _col_dn

	_text_color							= co_MltObsPnl_TextDark
	_text_size							= FunGlobalTextSize(stMltObsPnl_TextSize)

	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color,	10),
  		  text_size						= _text_size,
		  text_color					= color.new(_text_color,	10)
		  )

/// ─── DELTA

// /// ─── Function cell delta trends
// FunMltObsPnlCalcTrendDelta(_col, _row, _ticker) =>
	// 	_number								= _ticker
	// 	_upper								= 30
	// 	_lower								= -30

	// 	_if_buy								= _ticker	>	_ticker[2]	and	_ticker[1]	>	_ticker[3]	and	_ticker		>=	_upper
	// 	_if_sell							= _ticker	<	_ticker[2]	and	_ticker[1]	<	_ticker[3]	and	_ticker		<=	_lower

	// 	_if_structure						= _if_buy	?	'🟢'		:	_if_sell	?	'🔴'	:	''

	// 	_cell_color							=
	// 		  _number	>=	_upper			?
	// 		  co_MltObsPnl_TiPnBg			:
	// 		  _number	<=	_lower			?
	// 		  co_MltObsPnl_TiPnBg			:
	// 		  co_MltObsPnl_Neutral

	// 	_cell_text							= str.tostring(_ticker, '#.0')	+ '%'	+ ' '	+ _if_structure

	// 	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
	// 		  bgcolor						= color.new(_cell_color,			15),
	//   		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
	// 		  text_color					= color.new(co_MltObsPnl_TextDark,	15)
	// 		  )

/// ─── Function cell mfi / osc trends
FunMltObsPnlCalcTrendMfiOsc(_col, _row, _ticker) =>
	_distance							= 25

	_mid								= MltObsPnl_Middle
	_div								= 5

	//	overbought/oversold
	_overbought							=  _mid			+	_distance
	_oversold							=  _mid			-	_distance

	_fract_bougth						= math.round		(_overbought	-	(_overbought	/	_div))
	_fract_sold							= math.ceil			(_oversold		+	(_overbought	/	_div))

	/// ─── signal buy/sell
	_if_buy								= _ticker	>	_ticker[2]	and	_ticker[1]	>	_ticker[3]	and _ticker	>=	_mid
	_if_sell							= _ticker	<	_ticker[2]	and	_ticker[1]	<	_ticker[3]	and _ticker	<=	_mid

	_if_structure						=
						  _if_buy		and		_ticker		>=	_fract_bougth	?
						  '🟢'													:
						  _if_sell		and		_ticker		<=	_fract_sold		?
						  '🔴'													:
						  '    '

	_cell_color							=
		  _if_buy						?
		  co_MltObsPnl_Buy				:
		  _if_sell						?
		  co_MltObsPnl_Sell				:
		  co_MltObsPnl_Neutral

	_cell_opacity						=
		  _ticker	>=	_overbought		or
		  _ticker	<=	_oversold		?
		  20							:
		  _ticker	>=	_fract_bougth	or
		  _ticker	<=	_fract_sold		?
		  40							:
		  60

	_cell_text							= str.tostring(_ticker, '#.0')	+ ' '	+ _if_structure

	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color,	_cell_opacity),
  		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
		  text_color					= co_MltObsPnl_TextDark)

/// ─── Function cell adx trends
FunMltObsPnlCalcTrendAdx(_col, _row, _ticker) =>
	_number								= _ticker
	_mid								= 50

	_if_buy								= _ticker	>	_ticker[2]	and	_ticker[1]	>	_ticker[3]	and	_ticker		>	_mid
	_if_sell							= _ticker	<	_ticker[2]	and	_ticker[1]	<	_ticker[3]	and	_ticker		<	_mid

	_if_structure						= _if_buy	?	'🟢'		:	_if_sell	?	'🔴'	:	'    '

	_cell_color							=
		  _number	>=	_mid			?
		  co_MltObsPnl_Buy				:
		  co_MltObsPnl_Sell

	_cell_text							= str.tostring(_ticker, '#.0')	+ ' '	+ _if_structure

	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color,			15),
  		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
		  text_color					= color.new(co_MltObsPnl_TextDark,	15)
		  )

/// ─── Function table cells Signal
FunMltObsPnlCalcDirections(_col, _row, _index, _distance) =>
	_mid								= MltObsPnl_Middle
	_div								= 5

	//	overbought/oversold
	_overbought							=  _mid			+	_distance
	_oversold							=  _mid			-	_distance

	_fract_bougth						= math.round		(_overbought	-	(_overbought	/	_div))
	_fract_sold							= math.ceil			(_oversold		+	(_overbought	/	_div))

	/// ─── signal buy/sell
	_if_buy								= _index		>	_index[2]		and	_index[1]		>	_index[3]	and _index		<=	_fract_sold
	_if_sell							= _index		<	_index[2]		and	_index[1]		<	_index[3]	and _index		>=	_fract_bougth

	_if_structure						= _if_buy		?	'🟢'			:	_if_sell		?	'🔴'	:	'    '

	_cell_color							=
		  _if_buy	and _oversold		?
		  co_MltObsPnl_Buy				:
		  _if_sell	and	_overbought		?
		  co_MltObsPnl_Sell				:
		  co_MltObsPnl_Neutral

	_cell_opacity						=
		  _index	>=	_overbought		or
		  _index	<=	_oversold		?
		  25							:
		  _index	>=	_fract_bougth	or
		  _index	<=	_fract_sold		?
		  40							:
		  60

	_cell_text							= str.tostring(_index, '#.0')	+ ' ' +  _if_structure

	table.cell							(vTsiPnlTableTrend, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color,	_cell_opacity),
		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
		  text_color					= co_MltObsPnl_TextDark,
		  text_halign					= text.align_right,
		  width							= 5)

//// ─────────────────────────────────────────────────────────────────────

/// ─── MULTI INDICATORS

/// ─── New table indicators
var vTsiPnlTableMtlIndicator			= table.new(
		  position						= FunGlobalVertical(MltObsPnl_LocatMlIndVert) + '_' + FunGlobalHorizontal(MltObsPnl_LocatMlIndHoriz),
		  columns						= 1,
		  rows							= 7,
		  border_width					= 2,
		  frame_color					= color.new(co_MltObsPnl_Black,		15))

/// ─── Function table multi indicador
FunMltObsPnlCalcMultiIndic(_col, _row, _title, _ticker, _distance) =>
	/// ─── signal buy/sell
	_if_buy								= _ticker		>	_ticker[2]		and	_ticker[1]		>	_ticker[3]
	_if_sell							= _ticker		<	_ticker[2]		and	_ticker[1]		<	_ticker[3]
	_if_structure						= _if_buy		?	' ⬈'			:	_if_sell		?	' ⬊'	:	' '

	_mid								= MltObsPnl_Middle
	_div								= 5

	_overbought							=  _mid			+	_distance
	_oversold							=  _mid			-	_distance

	_fract_upper						= math.round		(_overbought	-	(_overbought	/	_div))
	_fract_lower						= math.ceil			(_oversold		+	(_overbought	/	_div))

	_cell_color							=
		  _ticker	>=	_fract_upper	?
		  co_MltObsPnl_Buy				:
		  _ticker	<=	_fract_lower	?
		  co_MltObsPnl_Sell				:
		  co_MltObsPnl_Neutral

	_cell_opacity						=
		  _ticker	>=	_overbought		or
		  _ticker	<=	_oversold		?
		  25							:
		  _ticker	>=	_fract_upper	or
		  _ticker	<=	_fract_lower	?
		  40							:
		  60

	_cell_text							= str.tostring(_ticker, '#.0')	+ ' ' +	_if_structure		+ '\n'	+ _title

	/// ─── table
	table.cell							(vTsiPnlTableMtlIndicator, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color,	_cell_opacity),
		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
		  text_color					= co_MltObsPnl_TextDark,
		  width							= 4)

/// ─── DELTA

// /// ─── Function cell delta multiindicators
	// FunMltObsPnlCalcMltIndDelta(_col, _row, _text, _ticker) =>
	// 	_number								= str.tonumber(_ticker)
	// 	_upper								= 30
	// 	_lower								= -30

	// 	_cell_color							=
	// 		  _number	>=	_upper			?
	// 		  co_MltObsPnl_Buy				:
	// 		  _number	<=	_lower			?
	// 		  co_MltObsPnl_Sell				:
	// 		  co_MltObsPnl_Neutral

	// 	_cell_text							= _text + '\n' + _ticker

	// 	table.cell							(vTsiPnlTableMtlIndicator, _col, _row, _cell_text,
	// 		  bgcolor						= color.new(_cell_color,			15),
	//   		  text_size						= FunGlobalTextSize(stMltObsPnl_TextSize),
	// 		  text_color					= color.new(co_MltObsPnl_TextDark,	15)
	// 		  )

//// ─────────────────────────────────────────────────────────────────────

/// ─── TICKER PANEL 

/// ─── function timeframe string
FunMltObsPnlStringTime() =>
	switch timeframe.period
		'1'								=> '1 min'
		'3'								=> '3 min'
		'5'								=> '5 min'
		'15'							=> '15 min'
		'30'							=> '30 min'
		'60'							=> '1 Hora'
		'120'							=> '2 Horas'
		'180'							=> '3 Horas'
		'240'							=> '4 Horas'
		'480'							=> '8 horas'
		'D'								=> 'Dia'
		'1D'							=> 'Dia'
		'W'								=> 'Semana'
		'1W'							=> 'Semana'
		'M'								=> 'Mes'

/// ─── table ticker time
var vTsiPnlTableTimeTicker			= table.new(
		  position						= position.top_center,
		  columns						= 1,
		  rows							= 1,
		  border_width					= 2,
		  frame_color					= color.new(co_MltObsPnl_Black,		80),
		  force_overlay					= true)

/// ─── Function cell delta multiindicators
FunMltObsPnlCalcTimeTicker() =>
	_col								= 0
	_row								= 0
	_bg_color							= _co_gbl_neutral
	_txt_color							= _co_gbl_txt_dark
	_txt_size							= FunGlobalTextSize('Grande')

	_cell_text							= 'ALLENx' + ' | ' + syminfo.ticker + ' | ' +  str.tostring(gbl_Source_C) + ' | ' + FunMltObsPnlStringTime()		//	syminfo.tickerid

	table.cell							(vTsiPnlTableTimeTicker, _col, _row, _cell_text,
		  bgcolor						= color.new(_bg_color,	15),
  		  text_size						= _txt_size,
		  text_color					= color.new(_txt_color,	15)
		  )


/// ＰＬＯＴ ―――――――――――――――――――――――――――


/// ─── Table Trend indicators
if display_MltObsPnlMultiTFIndicPanel
	if show_MltObsPnlRow_TSIdiv
		FunMltObsPnlCalcCellHead			(0,		0,			'TSI   ')
	if show_MltObsPnlRow_TSIfast
		FunMltObsPnlCalcCellHead			(0,		1,			'Fast  ')
	if show_MltObsPnlRow_TSIslow
		FunMltObsPnlCalcCellHead			(0,		2,			'Slow  ')
	if show_MltObsPnlRow_RSI
		FunMltObsPnlCalcCellHead			(0,		3,			'Rsi   ')
	if show_MltObsPnlRow_OSC
		FunMltObsPnlCalcCellHead			(0,		4,			'Osc   ')
	if show_MltObsPnlRow_MFI
		FunMltObsPnlCalcCellHead			(0,		5,			'Mfi   ')
	if show_MltObsPnlRow_ADX
		FunMltObsPnlCalcCellHead			(0,		6,			'Adx   ')
	// if show_MltObsPnlRow_DELTA
	// 	FunMltObsPnlCalcCellHead			(0,		7,			'Delta ')

	if show_MltObsPnlColumn_Now
		if show_MltObsPnlRow_TSIdiv
			FunMltObsPnlCalcDirections		(1,		0,			MltObsPnl_TSI_div,			35)
		if show_MltObsPnlRow_TSIslow
			FunMltObsPnlCalcDirections		(1,		1,			MltObsPnl_TSI_fast,			35)
		if show_MltObsPnlRow_TSIfast
			FunMltObsPnlCalcDirections		(1,		2,			MltObsPnl_TSI_slow,			40)
		if show_MltObsPnlRow_RSI
			FunMltObsPnlCalcDirections		(1,		3,			MltObsPnl_RSI,				30)
		if show_MltObsPnlRow_OSC
			FunMltObsPnlCalcTrendMfiOsc		(1,		4,			MltObsPnl_OSC)
		if show_MltObsPnlRow_MFI
			FunMltObsPnlCalcTrendMfiOsc		(1,		5,			MltObsPnl_MFI)
		if show_MltObsPnlRow_ADX
			FunMltObsPnlCalcTrendAdx		(1,		6,			MltObsPnl_ADX)
		// if show_MltObsPnlRow_DELTA
		// 	FunMltObsPnlCalcTrendDelta		(1,		7,			MltObsPnl_DELTA_f)

//// ─────────────────────────────────────────────────────────────────────

/// ─── Table Multi indicators
if display_MltObsPnlIndicatPanel
	// if show_MltObsPnlIndicatDelta
	// 	FunMltObsPnlCalcMltIndDelta			(0,	0,	'Delta',	MltObsPnl_DELTA)

	if show_MltObsPnlIndicatTSIdiv
		FunMltObsPnlCalcMultiIndic			(0,		1,		'TSI   ',		MltObsPnl_TSI_div,		35)

	if show_MltObsPnlIndicatTSIfast
		FunMltObsPnlCalcMultiIndic			(0,		2,		'Fast  ',		MltObsPnl_TSI_fast,		35)

	if show_MltObsPnlIndicatTSIslow
		FunMltObsPnlCalcMultiIndic			(0,		3,		'Slow  ',		MltObsPnl_TSI_slow,		40)

	if show_MltObsPnlIndicatRsi
		FunMltObsPnlCalcMultiIndic			(0,		4,		'RSI   ',		MltObsPnl_RSI,			30)

	if show_MltObsPnlIndicatMfi
		FunMltObsPnlCalcMultiIndic			(0,		5,		'MFI   ',		MltObsPnl_MFI,			25)

	if show_MltObsPnlIndicatAdx
		FunMltObsPnlCalcMultiIndic			(0,		6,		'ADX   ',		MltObsPnl_ADX,			20)			// base 50

//// ─────────────────────────────────────────────────────────────────────

/// ─── Table Ticker
if display_MltObsPnlCalcTimeTicker
	FunMltObsPnlCalcTimeTicker()


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

