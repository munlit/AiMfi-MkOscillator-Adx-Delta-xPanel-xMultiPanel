/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝

/// ╔═══════════════════════════════╗
/// ║	Market Structure Oscillador	║
/// ╔═══════════════════════════════╗
/// ║	AI Adaptive Money Flow Index║
/// ╔═══════════════════════════════╗
/// ║	Adx							║
/// ╔═══════════════════════════════╗
/// ║	All Tsi						║
/// ╚═══════════════════════════════╝

/// ╔═══════════════════════════════╗
/// ║	xTrend indicators Panel		║
/// ║	xMulti indicators Panel		║
/// ║	xTicker Panel				║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝


//@version=5
indicator(title							= 'AiMfi & MkOsc & Adx & allTsi & xMtPanel & xPanelIn [🎱 Allen 㔬]',
		  shorttitle					= 'MkOsc MfiAdx allTsi xPnlx [🎱 Allen 㔬]',
		//   shorttitle					= 'MkS MSOsc ZLag vidya Mfi Adx xTsiM xPanels [🎱 Allen 㔬]',
		  overlay						= true,
		  max_boxes_count				= 500,
		  max_labels_count				= 500,
		  max_lines_count				= 500,
		  max_bars_back					= 1000,
		  format						= format.price,
		//   timeframe_gaps				= true,
		  precision						= 1,
		  explicit_plot_zorder			= true)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ＩＮＰＵＴＳ ――――――――――――――――――――――――


globalGroupIndicat						= 'Visualización Global'
globalGroupTimeframe					= 'Configuración Global'

strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

/// Title Global ――――――――――――――――――――

/// Visual Global ―――――――――――――――――――
display_xTsiMu_TSI						= input.bool	(defval = true,			title = 'Mostrar xTSI',				group = globalGroupIndicat)

display_zeLagTrend						= input.bool	(defval = true,			title = 'Mostrar ZeroLag Trend',	group = globalGroupIndicat)

display_vVidya_VoVidya					= input.bool	(defval = true,			title = "Mostrar Vidya",			group = globalGroupIndicat)

display_FxMkSs__Sessions				= input.bool	(defval = true,			title = 'Fx Market Sessions',		group = globalGroupIndicat)

display_msOsc_MarketOSC					= input.bool	(defval = true,			title = 'Market Oscillator',		group = globalGroupIndicat)

display_adapMon_MFI						= input.bool	(defval = true,			title = 'Mostrar Ai Adaptative MFI', group = globalGroupIndicat)

display_DmiAdx_AdxHisto					= input.bool	(defval = false,		title = 'Mostrar ADX Histograma',	group = globalGroupIndicat)

display_MltObsPnlTimeFrPanel			= input.bool	(defval = true,			title = 'Mostrar Panel Tsi',		group = globalGroupIndicat)

display_MltObsPnlIndicatPanel			= input.bool	(defval = true,			title = 'Mostrar Panel Multi Inc',	group = globalGroupIndicat)

showxTsiMuTSIDivSpeed					= input.string 	(defval = 'Slow',		title = 'Diverg Speed',				group = globalGroupTimeframe,
			  options					=				['Fast', 'Slow'])

strGlobalAreasTimeFrame					= input.string 	(defval = '30 min',		title = 'Mostrar Sessions x TimeF',	group = globalGroupTimeframe,
			  options					=				['All', '2 Horas', '1 Hora', '45 min', '30 min'])

strGlobalMultiTimeFrame					= input.string 	(defval = 'Grafico',	title = 'Multi Timeframe',			group = globalGroupTimeframe,
			  options					=				['Grafico', '15 min', '30 min', '1 Hora', '2 Horas', '3 Horas', '4 Horas', '1 Dia', '1 Semana'])

strGlobalMultiHistogram					= input.string 	(defval = 'Dual',		title = 'Histograma',				group = globalGroupTimeframe,
			  options					=				['Mfi', 'Adx', 'Dual'])

strGlobalColorSelector					= input.string 	(defval = 'Allen',		title = 'Color Selector',			group = globalGroupTimeframe,
			  options					=				['Allen', 'Ultr', 'Light'])


/// Heikin Ashi ───────────────────────


showGlobal_HknAshi						= input.bool	(defval = true,			title = 'Activar Heikin Ashi',		group = 'Heikin Ashi mode',			tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close
gbl_Source_2							= showGlobal_HknAshi ? (heAsGblH + heAsGblL) / 2 : hl2
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3
// gbl_Source_4							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC + heAsGblO) / 4 : ohlc4


/// Switch ────────────────────────────


[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_extra,	_co_gbl_neutral]				= switch	strGlobalColorSelector
	'Allen'								=> [#33FFAC,	#CCF8FF,	#30D453,	#0061FE,	#E3FF53,	#CCF8FF]
	'Ultr'								=> [#98F1F4,	#E0D8CA,	#E3FF53,	#E0D8CA,	#CCF657,	#121F3D]
	'Light'								=> [#0061FE,	#FF4054,	#E6F7FF,	#121F3D,	#121F3D,	#FFF87C]


/// Colors ───────────────────────────

_co_gbl_long							= #30D453							// AllenGreen50
_co_gbl_short							= #EA1889							// AllenFucsia50

_co_gbl_white							= #E6F7FF							//	CitiAccentUltraLightBlue
_co_gbl_pink							= #FFB7FF							//	WavBehPink20
_co_gbl_sky								= #98F1F4							//	NexusSky
_co_gbl_mint							= #7AFFA1							//	SalesforceMint
_co_gbl_yellow							= #FDF43C							//	BrLiYel30
_co_gbl_lime							= #E3FF53							//	Ex1Lime
_co_gbl_blue							= #0035FF							//	ARoPrimary
_co_gbl_cocoa							= #E0D8CA							//	NetsuiteCocoa
_co_gbl_black							= #0C1633							//	PlatziBlue80
_co_gbl_light							= #FBFD73							//	BrLiYel10
_co_gbl_txt_dark						= #121F3D							//	PlatziBlue70
_co_gbl_txt_light						= #FFF87C							//	SalesforceYellow


// WiskAeroYellow							= #F9F940
// SalesforceLime							= #CCF657
// SalesforceLile							= #D5BEF2
// SalesforceOrange							= #FF8C7D
// SalesforceRed							= #FF4B4B
// SalesforceBlue							= #3F73F7
// Ex1Orange600								= #D93D04
// Ex1Red									= #A60303
// Ex1Wine									= #730202
// Ex1Teal									= #1CD8E1
// Ex1Ocean									= #00315e
// TaxusRed									= #F20505
// OsomeBlue								= #0061FE
// OsomeRed									= #FF4054


/// ＴＰＳ ―――――――――――――――――――――――――――――――――


type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――――――


/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'


/// ─── function tsi
FunGlobalCalcTSI(_speed, _x) =>
	_plus								= 50
	_source								= gbl_Source_C

	_long								= 25		// gbl_speed_long			= 6			// _smooth
	_short								= 0			// gbl_speed_short			= 13		// _smooth
	_signal								= 0			// gbl_speed_signal			= 5			// _smooth

	switch _speed
		'Fast' =>
			_short						:= 5
			_signal						:= 14

		'Slow' =>
			_short						:= 13
			_signal						:= 13

	_tsi								= _x * ta.tsi(_source, _short, _long) + _plus
	_tsi_ema							= ta.ema(_tsi, _signal)

	[_tsi, _tsi_ema]

/// ─── function timeframe conditional
FunGlobalCalculateTimeframeIf(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――


gblSource								= globalTypeOHL.new()


/// ＰＬＯＴ ――――――――――――――――――――――――――――――


_plot_gbl_midline						= plot(50,			title = 'Equilibrio',		display = display.none,			editable = false)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════════╗
/// ║	AI Adaptative MFI				║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj							= 'Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos'

adapMonGrpSet							= 'Adaptative MFI'
adapMonGrpLim							= 'Clustering Setting'
adapMonGrpApar							= 'Apariencia'

//// ───────────────────────
/// ─── Adaptive MFI
/// ─── Vars ─────────
//// ───────────────────────

showadapMonGroup						= input.bool	(defval = true,				title = 'Mostrar Ai Adaptative MFI',						group = adapMonGrpSet)

adapMonVarADJ							= input.bool	(defval = true,				title = 'Usar MFI ajustado',								group = adapMonGrpApar,		tooltip = adapMonToolAdj)
adapMonColorLong						= 				_co_gbl_buy
adapMonColorShort						= 				_co_gbl_sell
adapMonColorAux							= 				_co_gbl_white
adapMonColorDark						= 				_co_gbl_black

adapMonVarSRC							=				gbl_Source_3
// adapMonVarSRC							= input.source	(defval = hlc3,				title = 'Fuente MFI',										group = adapMonGrpSet)
adapMonVarLENGTH						= input.int		(defval = 14,				title = 'Longitud MFI',							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength					= input.int		(defval = 300,				title = 'Nº de datos de entrenamiento',			minval = 1,	group = adapMonGrpLim)
adapMonVarIterations					= input.int		(defval = 5,				title = 'Nº de iteraciones por barra',			minval = 1,	group = adapMonGrpLim)

float adapMonVarOverbought				=				75.0			// 80.0
float adapMonVarNeutral					=				50.0
float adapMonVarOversold				=				25.0			// 20.0


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


adapMonVarOSC							= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB						= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE						= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS						= array.new_float(1, adapMonVarOversold)

adapMonArrNE_NEW						= array.avg(adapMonArrNE)
adapMonArrOB_NEW						= array.avg(adapMonArrOB)
adapMonArrOS_NEW						= array.avg(adapMonArrOS)

positionBetweenBands					= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL							= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST							= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100						= adapMonVarOSC > adapMonArrNE_NEW		? color.new(adapMonColorLong, 90)		: color.new(adapMonColorShort, 90)
adapMonIfCOLOR0							= adapMonVarOSC > adapMonArrNE_NEW		? color.new(adapMonColorLong, 0)		: color.new(adapMonColorShort, 0)


/// ＰＬＯＴ ―――――――――――――――――――――――――――


adapMonPlotMAIN							= plot	(strGlobalMultiHistogram == 'Mfi' and showadapMonGroup ? adapMonIfVAL : na,						color = adapMonIfCOLOR100)
adapMonPlotMID							= plot	(strGlobalMultiHistogram == 'Mfi' and showadapMonGroup and adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW, color = adapMonIfCOLOR100)

adapMonPlotStDev						= plot	(strGlobalMultiHistogram == 'Mfi' and showadapMonGroup ? adapMonFuncST : na,					color = adapMonIfCOLOR100)

/// ─── plot marcas de sobrecompra y sobreventa
plot									(showadapMonGroup ? adapMonVarADJ ? 110 : adapMonArrOB_NEW : na,										color = color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(adapMonColorDark, 70), color.new(adapMonColorShort, 0)),	linewidth = 6)
plot									(showadapMonGroup ? adapMonVarADJ ? -10 : adapMonArrOS_NEW : na,										color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(adapMonColorDark, 70)),	linewidth = 6)


/// ─── fill areas de tendencia
fill									(adapMonPlotMID, adapMonPlotMAIN,																		color = adapMonIfCOLOR100, title = 'Area de Tendencia')
fill									(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW,					color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════════╗
/// ║	Adx Histogram						║
/// ║	@	Allen.							║
/// ╚═══════════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

colorxAdxDiHi_Buy						= _co_gbl_buy
colorxAdxDiHi_Short						= _co_gbl_sell
colorxAdxDiHi_Mid						= _co_gbl_extra
colorxAdxDiHi_Extra						= _co_gbl_extra

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

AdxDiHiGroupVars						= 'Adx Setting'
adxDiHi_Length							= input.int(defval = 14,		title = 'Longitud Adx',			group = AdxDiHiGroupVars)
adxDiHi_Th								= input.int(defval = 25,		title = 'Umbral',				group = AdxDiHiGroupVars)


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


xAdxDiHi_TrueRange						= math.max(math.max(gbl_Source_H - gbl_Source_L, math.abs(gbl_Source_H - nz(gbl_Source_C[1]))), math.abs(gbl_Source_L - nz(gbl_Source_C[1])))
xAdxDiHi_DirectMovePlus					= gbl_Source_H - nz(gbl_Source_H[1]) > nz(gbl_Source_L[1]) - gbl_Source_L ? math.max(gbl_Source_H - nz(gbl_Source_H[1]), 0) : 0
xAdxDiHi_DirectMoveMinus				= nz(gbl_Source_L[1]) - gbl_Source_L > gbl_Source_H - nz(gbl_Source_H[1]) ? math.max(nz(gbl_Source_L[1]) - gbl_Source_L, 0) : 0

var float xAdxDiHi_SmoothTrueRange		= na
var float xAdxDiHi_SmoothDirectMovePlus	= na
var float xAdxDiHi_SmoothDirectMoveMinus= na

xAdxDiHi_SmoothTrueRange				:= na(xAdxDiHi_SmoothTrueRange) ? xAdxDiHi_TrueRange : xAdxDiHi_SmoothTrueRange - (xAdxDiHi_SmoothTrueRange / adxDiHi_Length) + xAdxDiHi_TrueRange
xAdxDiHi_SmoothDirectMovePlus			:= na(xAdxDiHi_SmoothDirectMovePlus) ? xAdxDiHi_DirectMovePlus : xAdxDiHi_SmoothDirectMovePlus - (xAdxDiHi_SmoothDirectMovePlus / adxDiHi_Length) + xAdxDiHi_DirectMovePlus
xAdxDiHi_SmoothDirectMoveMinus			:= na(xAdxDiHi_SmoothDirectMoveMinus) ? xAdxDiHi_DirectMoveMinus : xAdxDiHi_SmoothDirectMoveMinus - (xAdxDiHi_SmoothDirectMoveMinus / adxDiHi_Length) + xAdxDiHi_DirectMoveMinus


/// ＣＡＬＣＵＬＡＴＩＯＮＳ ―――――――――――――


xAdxDiHi_DIPlus							= xAdxDiHi_SmoothDirectMovePlus / xAdxDiHi_SmoothTrueRange * 100
xAdxDiHi_DIMinus						= xAdxDiHi_SmoothDirectMoveMinus / xAdxDiHi_SmoothTrueRange * 100
xAdxDiHi_DX								= math.abs(xAdxDiHi_DIPlus - xAdxDiHi_DIMinus) / (xAdxDiHi_DIPlus + xAdxDiHi_DIMinus) * 100
xAdxDiHi_ADX							= ta.sma(xAdxDiHi_DX, adxDiHi_Length)

xAdxDiHi_Didi							= 25 + (xAdxDiHi_DIPlus - xAdxDiHi_DIMinus)

xAdxDiHi_CR								= xAdxDiHi_ADX <= 22 ? color.new(colorxAdxDiHi_Buy, 80) : xAdxDiHi_ADX <= 34 ? color.new(colorxAdxDiHi_Buy, 60) : xAdxDiHi_ADX <= 46 ? color.new(colorxAdxDiHi_Buy, 40) : xAdxDiHi_ADX <= 58 ? color.new(colorxAdxDiHi_Buy, 25) : xAdxDiHi_ADX <= 70 ? color.new(colorxAdxDiHi_Buy, 10) : color.new(colorxAdxDiHi_Buy, 0)
xAdxDiHi_CG								= xAdxDiHi_ADX <= 22 ? color.new(colorxAdxDiHi_Short, 80) : xAdxDiHi_ADX <= 34 ? color.new(colorxAdxDiHi_Short, 60) : xAdxDiHi_ADX <= 46 ? color.new(colorxAdxDiHi_Short, 40) : xAdxDiHi_ADX <= 58 ? color.new(colorxAdxDiHi_Short, 25) : xAdxDiHi_ADX <= 70 ? color.new(colorxAdxDiHi_Short, 10) : color.new(colorxAdxDiHi_Short, 0)


/// ＰＬＯＴ ―――――――――――――――――――――――――――


plot(strGlobalMultiHistogram == 'Adx' ? xAdxDiHi_Didi : na,		style = plot.style_columns,		linewidth = 4,		color = xAdxDiHi_Didi >= 25 ? xAdxDiHi_CR : xAdxDiHi_CG,		histbase = adxDiHi_Th ,		title = 'DI')
plot(strGlobalMultiHistogram == 'Adx' ? xAdxDiHi_Didi : na,		style = plot.style_line,		linewidth = 2,		color = xAdxDiHi_Didi >= 25 ? xAdxDiHi_CR : xAdxDiHi_CG,		histbase = adxDiHi_Th ,		title = 'Linea DI')

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
colorTsiMuDiBaseLong					= _co_gbl_long
colorTsiMuDiBaseShort					= _co_gbl_short

colorTsiMuDiTendency					= _co_gbl_neutral
colorTsiMuDiMultitimeframe				= _co_gbl_extra
colorTsiMuDiDivergBg					= _co_gbl_black

colorTsiMuDiDivergLong					= _co_gbl_buy
colorTsiMuDiDivergShort					= _co_gbl_sell
colorTsiMuDiDivergNone					= color.new(_co_gbl_black,			100)
colorTsiMuDiText						= color.new(_co_gbl_txt_dark,		0)

/// ─── Inputs ───
groupTsiMuDiTSIVars						= 'TSI & Divergences'
vTsiMuDiLong							= input.int		(defval = 6,		title = 'Longitud de Compra',			group = globalTSIGroupTimeframe)
vTsiMuDiShort							= input.int		(defval = 13,		title = 'Longitud de Venta',			group = globalTSIGroupTimeframe)
vTsiMuDiSignal							= input.int		(defval = 5,		title = 'Longitud de Señal',			group = globalTSIGroupTimeframe)

/// ─── divergences ───
vTsiMuDiLBR								= 5									//	Corrección a la derecha
vTsiMuDiLBL								= 5									//	Corrección a la izquierda
vTsiMuDiRangeUpper						= 30								//	Rango de corrección maximo
vTsiMuDiRangeLower						= 2									//	Rango de corrección minimo
/// ─── Show ───
showTsiMuDiPlotDiverg					= input.bool	(defval = true,		title = 'Divergencias',					group = globalTSIGroupTimeframe,		inline = 'diverg show')
showTsiMuDiPlotDivergScalp				= input.bool	(defval = true,		title = 'Scalp',						group = globalTSIGroupTimeframe,		inline = 'diverg show')
showTsiMuDiCloudOn						= input.bool	(defval = true,		title = 'TSI Cloud',					group = globalTSIGroupTimeframe)

vTsiMuDiSource							= gbl_Source_C
// vTsiMuDiSource							= gbl_Source_C[0]


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


/// function tendency (smooth & tsi calculate)
FunTsiMuDiCalculateTendencyTSI(_source, _long, _short) =>
	_change								= ta.change(_source)
	_smooth_single						= ta.ema(_change, _long)
	_smooth_double						= ta.ema(_smooth_single, _short)
	_x									= 50
	_plus								= 50
	_smooth								= _smooth_double
	_smooth_abs							= math.abs(_smooth_double)
	_x * (_smooth / _smooth_abs) + _plus

//// ───────────────────────

/// function calculate TSI
FunTsiMuDiCalculateDoubleSmooth(_source, _long, _short) =>
	fist_smooth							= ta.ema(_source, _long)
	ta.ema(fist_smooth, _short)

FunTsiMuDiCalculateTSI(_source, _long, _short, _x) =>
	_change								= ta.change(_source)
	// _x									= 125
	_plus								= 50
	_smooth								= FunTsiMuDiCalculateDoubleSmooth(_change, _long, _short)
	_smooth_abs							= FunTsiMuDiCalculateDoubleSmooth(math.abs(_change), _long, _short)
	_x * (_smooth / _smooth_abs) + _plus


/// ＩＮＳＴＡＮＣＳ ――――――――――――――――――――


/// Multitimeframe
/// instance function calculate multitimeframe Tsi
iTsiMuDiCalculateMultiTfTSI				= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort, 170)
iTsiMuDiCalculateMultiTfEMA				= ta.ema(iTsiMuDiCalculateMultiTfTSI, vTsiMuDiSignal)

/// instance function global timeframe
iTsiMuDiCalculateMultiTfTSIRange		= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500 ? FunGlobalCalculateTimeframeVariant(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) : timeframe.period

/// ─── Timeframe multitimeframe Tsi
arrTsiMuDiMultiTimeframeTicker			= request.security(syminfo.tickerid,	iTsiMuDiCalculateMultiTfTSIRange,	iTsiMuDiCalculateMultiTfTSI,	barmerge.gaps_on)

/// Tendency
/// instances function calculate tendency  Tsi
iTsiMuDiCalculateTendencyTSI			= FunTsiMuDiCalculateTendencyTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort)
iTsiMuDiCalculateTendencyEma			= ta.ema(iTsiMuDiCalculateTendencyTSI, vTsiMuDiSignal)

/// PRESENT
/// instance function calculate present Tsi
iTsiMuDiCalculateTSI					= FunTsiMuDiCalculateTSI(vTsiMuDiSource, vTsiMuDiLong, vTsiMuDiShort, 125)
iTsiMuDiCalculateEma					= ta.ema(iTsiMuDiCalculateTSI, vTsiMuDiSignal)


/// ＣＡＬＣＵＬＡＴＩＯＮＳ ――――――――――――
/// ─── plot color multitimeframe
insTsiMuDiMultiTimefPlotColor			= iTsiMuDiCalculateMultiTfTSI	> iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateMultiTfTSI	<= iTsiMuDiCalculateMultiTfEMA	? colorTsiMuDiBaseShort	: na

/// fill color tendency
insTsiMuDiCloudTendencyColor			= iTsiMuDiCalculateTendencyTSI	> iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTendencyTSI	<= iTsiMuDiCalculateTendencyEma	? colorTsiMuDiBaseShort		: na

/// ─── plot color
insTsiMuDiPlotColor						= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na
/// ─── fill cloud color
insTsiMuDiCloudColor					= iTsiMuDiCalculateTSI			> iTsiMuDiCalculateEma			? colorTsiMuDiBaseLong	: iTsiMuDiCalculateTSI			<= iTsiMuDiCalculateEma			? colorTsiMuDiBaseShort	: na


/// ＰＬＯＴ ―――――――――――――――――――――――――――


 /// plot multi timeframe
insTsiMuDiMultitimefTsiPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? arrTsiMuDiMultiTimeframeTicker : na,							color = color.new(colorTsiMuDiMultitimeframe, 60),		linewidth = 2)
insTsiMuDiMultitimefEmaPlotLine			= plot(showTsiMuDiTSIMultitimeframe	? ta.ema(arrTsiMuDiMultiTimeframeTicker, vTsiMuDiSignal) : na,	color = color.new(colorTsiMuDiMultitimeframe, 60),		linewidth = 1)

/// plot tendency TSI
insTsiMuDiTendencyTsiPlotLine			= plot(showTsiMuDiTSITendency ? iTsiMuDiCalculateTendencyTSI : na,									color = color.new(colorTsiMuDiTendency, 75),			linewidth = 1)
insTsiMuDiTendencyEmaPlotLine			= plot(showTsiMuDiTSITendency ? ta.ema(iTsiMuDiCalculateTendencyTSI,	vTsiMuDiSignal) : na,		color = color.new(colorTsiMuDiTendency, 50),			linewidth = 1)

/// fill tendency
fill(insTsiMuDiTendencyTsiPlotLine, insTsiMuDiTendencyEmaPlotLine,																			color = color.new(insTsiMuDiCloudTendencyColor, 85))

/// plot present TSI
plot(showTsiMuDiTSIDivergs				? iTsiMuDiCalculateTSI	: na,																		color = color.new(colorTsiMuDiDivergBg, 60),			linewidth = 6)		//	plot TSI blue
plot(showTsiMuDiTSIDivergs				? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,												color = color.new(colorTsiMuDiDivergBg, 60),			linewidth = 6)		//	plot EMA blue
insTsiMuDiTsiPlotLine					= plot(showTsiMuDiTSIDivergs ? iTsiMuDiCalculateTSI	: na,											color = color.new(insTsiMuDiPlotColor, 30),				linewidth = 2)		//	plot TsiSI
insTsiMuDiEmaPlotLine					= plot(showTsiMuDiTSIDivergs ? ta.ema(iTsiMuDiCalculateTSI,	vTsiMuDiSignal)	: na,					color = color.new(insTsiMuDiPlotColor, 30),				linewidth = 2)		//	plot EMA

/// fill present
fill(insTsiMuDiTsiPlotLine, insTsiMuDiEmaPlotLine,																							color = showTsiMuDiCloudOn ? color.new(insTsiMuDiCloudColor, 70) : na)						//	fill

//// ───────────────────────
/// ─── Divergences ───
//// ───────────────────────

insTsiMuDiPLFound						= na(ta.pivotlow(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true
insTsiMuDiPHFound						= na(ta.pivothigh(iTsiMuDiCalculateTSI, vTsiMuDiLBL, vTsiMuDiLBR)) ? false : true

FunTsiMuDi_inRange(cond) =>
	insTsiMuDiBars						= ta.barssince(cond == true)
	vTsiMuDiRangeLower					<= insTsiMuDiBars and insTsiMuDiBars <= vTsiMuDiRangeUpper

//// ───────────────────────
/// ─── Compra regular ───
//// ───────────────────────

/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICELL							= low[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsBULLCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmacion de Compra',
			  linewidth					= 2,
			  color						= tsiDiInsBULLCond ? color.new(colorTsiMuDiDivergLong, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and	tsiDiInsBULLCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Compra ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Compra scalp ───
//// ───────────────────────

/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPLFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1)	and FunTsiMuDi_inRange(insTsiMuDiPLFound[1])
tsiDiInsPRICEHL							= low[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPLFound, low[vTsiMuDiLBR], 1)
tsiDiInsHiddenBullCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insTsiMuDiPLFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPLFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Compra trend',
			  linewidth					= 2,
			  color						= tsiDiInsHiddenBullCond ? color.new(colorTsiMuDiDivergLong, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBullCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Compra trend',
			  text						= ' △ trend ',
			  style						= shape.labelup,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergLong, 40),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta regular ───
//// ───────────────────────

/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	< ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICEHH							= high[vTsiMuDiLBR]					> ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsBEARCond						= showTsiMuDiPlotDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Venta',
			  linewidth					= 2,
			  color						= tsiDiInsBEARCond ? color.new(colorTsiMuDiDivergShort, 10) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsBEARCond				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Venta ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 10),
			  textcolor					= colorTsiMuDiText)

//// ───────────────────────
/// ─── Venta scalp ───
//// ───────────────────────

/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= iTsiMuDiCalculateTSI[vTsiMuDiLBR]	> ta.valuewhen(insTsiMuDiPHFound, iTsiMuDiCalculateTSI[vTsiMuDiLBR], 1) and FunTsiMuDi_inRange(insTsiMuDiPHFound[1])
tsiDiInsPRICELH							= high[vTsiMuDiLBR]					< ta.valuewhen(insTsiMuDiPHFound, high[vTsiMuDiLBR], 1)
tsiDiInsHiddenBearCond					= showTsiMuDiPlotDivergScalp		and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insTsiMuDiPHFound

plot(showTsiMuDiTSIDivergs				and insTsiMuDiPHFound				? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Confirmación de Venta trend',
			  linewidth					= 2,
			  color						= tsiDiInsHiddenBearCond ? color.new(colorTsiMuDiDivergShort, 40) : colorTsiMuDiDivergNone)

plotshape(showTsiMuDiTSIDivergs			and tsiDiInsHiddenBearCond			? iTsiMuDiCalculateTSI[vTsiMuDiLBR] : na,
			  offset					= -vTsiMuDiLBR,
			  title						= 'Etiqueta de Venta trend',
			  text						= ' ▽ trend ',
			  style						= shape.labeldown,
			  location					= location.absolute,
			  color						= color.new(colorTsiMuDiDivergShort, 40),
			  textcolor					= colorTsiMuDiText)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║	Panel TSI Multi Timeframe		║
/// ║	Panel Tsi MultiTrend			║
/// ║	Panel Multi Indicator			║
/// ║	@	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── TSI Obs MTF ───
/// ─── TSI Box ───
//// ───────────────────────

colorTsiObsPnl_Buy						= _co_gbl_long
colorTsiObsPnl_Sell						= _co_gbl_short
colorTsiObsPnl_Neutral					= _co_gbl_neutral
colorTsiObsPnl_White					= _co_gbl_white
colorTsiObsPnl_Black					= _co_gbl_black
colorTsiObsPnl_TextDark					= _co_gbl_txt_dark
colorTsiObsPnl_TextLight				= _co_gbl_txt_light
colorTsiObsPnl_TiPnBg					= _co_gbl_extra

/// ─── Inputs
tsiObsPnlGroupTimeframes				=				'Timeframe Panel'
showTsiObsPnlTimeframesPanel			= input.bool	(true,				title = 'Panel TSI',			group = tsiObsPnlGroupTimeframes,		inline = 'show p')
showTsiObsPnlPanelExt					= input.bool	(true,				title = 'Ampliado',				group = tsiObsPnlGroupTimeframes,		inline = 'show p')
showTsiObsPnlTF05m						= input.bool	(false,				title = '5m   ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr')
showTsiObsPnlTF15m						= input.bool	(true,				title = '15m  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr')
showTsiObsPnlTF30m						= input.bool	(false,				title = '30m  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr')
showTsiObsPnlTF1h						= input.bool	(true,				title = '1 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF2h						= input.bool	(true,				title = '2 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF3h						= input.bool	(false,				title = '3 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF4h						= input.bool	(false,				title = '4 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')
showTsiObsPnlTF1d						= input.bool	(false,				title = '1 D  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')
showTsiObsPnlTF1w						= input.bool	(false,				title = '1 S  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')

tsiObsPnlGroupSignal					=				'Signal Panel'
showTsiObsPnlSignalPanel				= input.bool	(true,				title = 'Panel TSI Signal',		group = tsiObsPnlGroupSignal)
showTsiObsPnlSignalTsi					= input.bool	(true,				title = 'Tsi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalMtf					= input.bool	(true,				title = 'Mtf ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalRsi					= input.bool	(false,				title = 'Rsi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalMfi					= input.bool	(true,				title = 'Mfi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalAdx					= input.bool	(true,				title = 'Adx ',					group = tsiObsPnlGroupSignal,			inline = 'signal')

tsiObsPnl_PosiVert						= input.string	(defval = 'abajo',	title = ' Y: ',					group = tsiObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['arriba', 'medio','abajo'])
tsiObsPnl_PosiHoriz						= input.string	(defval = 'centro',	title = ' X: ',					group = tsiObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['izquierda', 'centro','derecha'])

tsiObsPnl_LocatSignalVert				= input.string	(defval = 'medio',	title = ' Y: ',					group = tsiObsPnlGroupSignal,			inline = 'ubic signal',
		  options						=				['arriba', 'medio','abajo'])
tsiObsPnl_LocatSignalHoriz				= input.string	(defval = 'derecha',title = ' X: ',					group = tsiObsPnlGroupSignal,			inline = 'ubic signal',
		  options						=				['izquierda', 'derecha'])

stTsiObsPnl_TextSize					= input.string	(defval = 'normal',	title = 'Tamaño de texto',
		  options						= ['auto','tiny','small','normal','large','huge'])

vTsiObsPnl_RsiLength					= 14

/// ───────────────────────
/// ─── Instances
/// ───────────────────────

/// ─── RSI
tsiObsPnlRSI							= ta.rsi(gbl_Source_C, vTsiObsPnl_RsiLength)

/// ─── TSI invoke
tsiObsPnlTSI							= iTsiMuDiCalculateMultiTfTSI
tsiObsPnlMTFRange						= FunGlobalCalculateTimeframeVariant(timeframe.period)
// tsiObsPnlMTFRange						= FunGlobalCalculateTimeframeRange(insGlobalTFCoefficient, timeframe.period)
tsiObsPnlEma							= iTsiMuDiCalculateMultiTfEMA
tsiObsPnlMFI							= adapMonIfVAL
tsiObsPnlADX							= xAdxDiHi_Didi

/// ─── TSI invoke multitimeframe
fTsiObsPnlExtNow						= FunGlobalCalculateTimeframeVariant(timeframe.period)
fTsiObsPnlExt05m						= FunGlobalCalculateTimeframeVariant('5')
fTsiObsPnlExt15m						= FunGlobalCalculateTimeframeVariant('15')
fTsiObsPnlExt30m						= FunGlobalCalculateTimeframeVariant('30')
fTsiObsPnlExt1h							= FunGlobalCalculateTimeframeVariant('60')
fTsiObsPnlExt2h							= FunGlobalCalculateTimeframeVariant('120')
fTsiObsPnlExt3h							= FunGlobalCalculateTimeframeVariant('180')
fTsiObsPnlExt4h							= FunGlobalCalculateTimeframeVariant('240')
fTsiObsPnlExt1d							= '1D'
fTsiObsPnlExt1w							= '1W'

/// instance function global timeframe
iTsiObsPnlCalcSignal					= timeframe.period

/// ─── TSI timeframes
vTsiObsPnlTF05m							= request.security(syminfo.tickerid,		'5',		tsiObsPnlTSI)
vTsiObsPnlTF15m							= request.security(syminfo.tickerid,		'15',		tsiObsPnlTSI)
vTsiObsPnlTF30m							= request.security(syminfo.tickerid,		'30',		tsiObsPnlTSI)
vTsiObsPnlTF1h							= request.security(syminfo.tickerid,		'60',		tsiObsPnlTSI)
vTsiObsPnlTF2h							= request.security(syminfo.tickerid,		'120',		tsiObsPnlTSI)
vTsiObsPnlTF3h							= request.security(syminfo.tickerid,		'180',		tsiObsPnlTSI)
vTsiObsPnlTF4h							= request.security(syminfo.tickerid,		'240',		tsiObsPnlTSI)
vTsiObsPnlTF1d							= request.security(syminfo.tickerid,		'D',		tsiObsPnlTSI)
vTsiObsPnlTF1w							= request.security(syminfo.tickerid,		'W',		tsiObsPnlTSI)

/// ─── TSI timeframes extend
[vTsiObsPnlTFExtMtfW,		vTsiObsPnlTFExtMtfW_2,			vTsiObsPnlTFExtMtfW_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExtNow,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf05m,		vTsiObsPnlTFExtMtf05m_2,		vTsiObsPnlTFExtMtf05m_3]						= request.security(syminfo.tickerid,	fTsiObsPnlExt05m,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf15m,		vTsiObsPnlTFExtMtf15m_2,		vTsiObsPnlTFExtMtf15m_3]						= request.security(syminfo.tickerid,	fTsiObsPnlExt15m,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf30m,		vTsiObsPnlTFExtMtf30m_2,		vTsiObsPnlTFExtMtf30m_3]						= request.security(syminfo.tickerid,	fTsiObsPnlExt30m,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf1h,		vTsiObsPnlTFExtMtf1h_2,			vTsiObsPnlTFExtMtf1h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt1h,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf2h,		vTsiObsPnlTFExtMtf2h_2,			vTsiObsPnlTFExtMtf2h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt2h,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf3h,		vTsiObsPnlTFExtMtf3h_2,			vTsiObsPnlTFExtMtf3h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt3h,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf4h,		vTsiObsPnlTFExtMtf4h_2,			vTsiObsPnlTFExtMtf4h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt4h,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf1d,		vTsiObsPnlTFExtMtf1d_2,			vTsiObsPnlTFExtMtf1d_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt1d,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2]],	lookahead = barmerge.lookahead_on)

/// ─── TSI timeframes signal
[vTsiObsPnlTFSignalTsi,	vTsiObsPnlTFSignalTsi_2,	vTsiObsPnlTFSignalTsi_3,	vTsiObsPnlTFSignalTsi_4]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2],	tsiObsPnlTSI[3]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalEma,	vTsiObsPnlTFSignalEma_2,	vTsiObsPnlTFSignalEma_3,	vTsiObsPnlTFSignalEma_4]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlEma,	tsiObsPnlEma[1],	tsiObsPnlEma[2],	tsiObsPnlEma[3]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalMtf,	vTsiObsPnlTFSignalMtf_2,	vTsiObsPnlTFSignalMtf_3,	vTsiObsPnlTFSignalMtf_4]	= request.security(syminfo.tickerid,	tsiObsPnlMTFRange,		[tsiObsPnlTSI,	tsiObsPnlTSI[1],	tsiObsPnlTSI[2],	tsiObsPnlTSI[3]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalRsi,	vTsiObsPnlTFSignalRsi_2,	vTsiObsPnlTFSignalRsi_3,	vTsiObsPnlTFSignalRsi_4]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlRSI,	tsiObsPnlRSI[1],	tsiObsPnlRSI[2],	tsiObsPnlRSI[3]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalMfi,	vTsiObsPnlTFSignalMfi_2,	vTsiObsPnlTFSignalMfi_3,	vTsiObsPnlTFSignalMfi_4]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlMFI,	tsiObsPnlMFI[1],	tsiObsPnlMFI[2],	tsiObsPnlMFI[3]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFSignalAdx,	vTsiObsPnlTFSignalAdx_2,	vTsiObsPnlTFSignalAdx_3,	vTsiObsPnlTFSignalAdx_4]	= request.security(syminfo.tickerid,	iTsiObsPnlCalcSignal,	[tsiObsPnlADX,	tsiObsPnlADX[1],	tsiObsPnlADX[2],	tsiObsPnlADX[3]],	lookahead = barmerge.lookahead_on)


/// ＦＵＮＣＴＩＯＮＳ ――――――――――――――――――


/// ─── New table
var vTsiPnlNewTable						= table.new(
	  position							= FunGlobalVertical(tsiObsPnl_PosiVert) + '_' + FunGlobalHorizontal(tsiObsPnl_PosiHoriz),
	  columns							= 11,
	  rows								= 3,
	  border_width						= 2,
	  frame_color						= color.new(colorTsiObsPnl_Black, 15),
	  force_overlay						= true)

/// ─── New table signal
var vTsiPnlNewTableSignal				= table.new(
		  position						= FunGlobalVertical(tsiObsPnl_LocatSignalVert) + '_' + FunGlobalHorizontal(tsiObsPnl_LocatSignalHoriz),
		  columns						= 1,
		  rows							= 5,
		  border_width					= 2,
		  frame_color					= color.new(colorTsiObsPnl_Black, 15))

/// ─── Function table cells
FunTsiObsPnlCalculateCell(_col, _row, _timeframe, _value) =>
	_cell_color							= _value >= 100 ? colorTsiObsPnl_Buy : _value <= 0 ? colorTsiObsPnl_Sell : colorTsiObsPnl_Neutral
	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65
	_cell_text							= _timeframe + '\n' + str.tostring(_value, '#.00')
	_txtsize							= stTsiObsPnl_TextSize

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _opacity),
		  text_size						= _txtsize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 5)

/// ─── Function table name
FunTsiObsPnlCalculateCellName(_col, _row, _text) =>
	_cell_text							= _text

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(colorTsiObsPnl_TiPnBg, 10),
  		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= color.new(colorTsiObsPnl_TextDark, 10),
		  width							= 3)

/// ─── Function table time
FunTsiObsPnlCalculateCellTime(_col, _row, _time) =>
	_bgcolor							= _co_gbl_black
	_opacity							= 40
	_cell_text							= _time
	_txtcolor							= colorTsiObsPnl_TextLight
	_txtsize							= stTsiObsPnl_TextSize

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_bgcolor, _opacity),
		  text_size						= _txtsize,
		  text_color					= colorTsiObsPnl_TextLight,
		  width							= 5)

/// ─── Function table value
FunTsiObsPnlCalculateCellValue(_col, _row, _value) =>
	_cell_color							= _value >= 100 ? colorTsiObsPnl_Buy : _value <= 0 ? colorTsiObsPnl_Sell : colorTsiObsPnl_Neutral
	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65
	_cell_text							= str.tostring(_value, '#.00')
	_txtsize							= stTsiObsPnl_TextSize

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _opacity),
		  text_size						= _txtsize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 5)

/// ─── Function table cells
FunTsiObsPnlCalculateCellExtend(_col, _row, _var, _var2, _var3) =>
	/// ─── signal buy/sell
	_min								= 0
	_max								= 100
	_if_buy								= _var	> _var2	and _var	> _var3	and	_var < _min
	_if_sell							= _var	< _var2	and _var	< _var3	and	_var > _max
	_trend_buy							= _var	> _var2	and _var	> _var3
	_trend_sell							= _var	< _var2	and _var	< _var3
	_if_condition						= _if_sell		?	'⬊ ⬊'	:	_if_buy		?	'⬈ ⬈'	:	' '
	_trend_condition					= _trend_sell	?	'⬊ '	:	_trend_buy	?	'⬈ '	:	' '

	_div								= 6
	_fract_max							= math.round(_max - (_max / _div))
	_fract_min							= math.ceil(_min + (_max / _div))

	_cell_color							= _var >= _max and _trend_sell ? colorTsiObsPnl_Sell : _var <= _min and _trend_buy ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral
	_ext_opacity						= _var >= _max or _var <= _min ? 30 : _var >= _fract_max or _var <= _fract_min ? 40 : 65
	_cell_text							= _if_condition + _trend_condition
	// _cell_text							= str.tostring(_var, '#.00') + _if_condition + _trend_condition

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _ext_opacity),
		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 4)

/// ─── Function table signal
FunTsiObsPnlCalculateSignal(_col, _row, _title, _var, _var2, _var3, _var4, _min, _max) =>
	/// ─── signal buy/sell
	_if_buy								= _var		> _var3		and _var2		> _var4		and	_var > vTsiObsPnlTFSignalEma	and	_var < _min
	_if_sell							= _var		< _var3		and _var2		< _var4		and _var < vTsiObsPnlTFSignalEma	and	_var > _max
	_if_condition						= _if_sell	?	' 🔴 ⬊ '	:	_if_buy	?	' 🟢 ⬈ '	:	'  '

	_div								= 6
	_fract_max							= math.round(_max - (_max / _div))
	_fract_min							= math.ceil(_min + (_max / _div))

	_cell_color							= _var >= _max ? colorTsiObsPnl_Sell : _var <= _min ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral
	_signal_opacity						= _var >= _max or _var <= _min ? 30 : _var >= _fract_max or _var <= _fract_min ? 40 : 65
	_cell_text							= _title + '\n' + str.tostring(_var, '#.00') + '\n' + _if_condition

	/// ─── table
	table.cell							(vTsiPnlNewTableSignal, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _signal_opacity),
		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 4)


/// ＰＬＯＴ ―――――――――――――――――――――――――――


/// ─── Table TSI
if showTsiObsPnlTimeframesPanel
	FunTsiObsPnlCalculateCellName				(0,	0,		'  ')
	FunTsiObsPnlCalculateCellName				(0,	1,		'Tsi')
	if showTsiObsPnlPanelExt
		FunTsiObsPnlCalculateCellName			(0,	2,		'Plus')

	FunTsiObsPnlCalculateCellTime				(1,	0,		'Ahora')
	FunTsiObsPnlCalculateCellValue				(1,	1,		tsiObsPnlTSI)
	if showTsiObsPnlPanelExt
		FunTsiObsPnlCalculateCellExtend			(1,	2,		vTsiObsPnlTFExtMtfW,	vTsiObsPnlTFExtMtfW_2,		vTsiObsPnlTFExtMtfW_3)

	if showTsiObsPnlTF05m
		FunTsiObsPnlCalculateCellTime			(2,	0,		'5 m')
		FunTsiObsPnlCalculateCellValue			(2,	1,		vTsiObsPnlTF05m)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(2,	2,		vTsiObsPnlTFExtMtf05m,	vTsiObsPnlTFExtMtf05m_2,	vTsiObsPnlTFExtMtf05m_3)

	if showTsiObsPnlTF15m
		FunTsiObsPnlCalculateCellTime			(3,	0,		'15 m')
		FunTsiObsPnlCalculateCellValue			(3,	1,		vTsiObsPnlTF15m)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(3,	2,		vTsiObsPnlTFExtMtf15m,	vTsiObsPnlTFExtMtf15m_2,	vTsiObsPnlTFExtMtf15m_3)

	if showTsiObsPnlTF30m
		FunTsiObsPnlCalculateCellTime			(4,	0,		'30 m')
		FunTsiObsPnlCalculateCellValue			(4,	1,		vTsiObsPnlTF30m)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(4,	2,		vTsiObsPnlTFExtMtf30m,	vTsiObsPnlTFExtMtf30m_2,	vTsiObsPnlTFExtMtf30m_3)

	if showTsiObsPnlTF1h
		FunTsiObsPnlCalculateCellTime			(5,	0,		'1 H')
		FunTsiObsPnlCalculateCellValue			(5,	1,		vTsiObsPnlTF1h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(5,	2,		vTsiObsPnlTFExtMtf1h,	vTsiObsPnlTFExtMtf1h_2,		vTsiObsPnlTFExtMtf1h_3)

	if showTsiObsPnlTF2h
		FunTsiObsPnlCalculateCellTime			(6,	0,		'2 H')
		FunTsiObsPnlCalculateCellValue			(6,	1,		vTsiObsPnlTF2h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(6,	2,		vTsiObsPnlTFExtMtf2h,	vTsiObsPnlTFExtMtf2h_2,		vTsiObsPnlTFExtMtf2h_3)

	if showTsiObsPnlTF3h
		FunTsiObsPnlCalculateCellTime			(7,	0,		'3 H')
		FunTsiObsPnlCalculateCellValue			(7,	1,		vTsiObsPnlTF3h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(7,	2,		vTsiObsPnlTFExtMtf3h,	vTsiObsPnlTFExtMtf3h_2,		vTsiObsPnlTFExtMtf3h_3)

	if showTsiObsPnlTF4h
		FunTsiObsPnlCalculateCellTime			(8,	0,		'4 H')
		FunTsiObsPnlCalculateCellValue			(8,	1,		vTsiObsPnlTF4h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(8,	2,		vTsiObsPnlTFExtMtf4h,	vTsiObsPnlTFExtMtf4h_2,		vTsiObsPnlTFExtMtf4h_3)

	if showTsiObsPnlTF1d
		FunTsiObsPnlCalculateCellTime			(9,	0,		'1 D')
		FunTsiObsPnlCalculateCellValue			(9,	1,		vTsiObsPnlTF1d)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(9,	2,		vTsiObsPnlTFExtMtf1d,	vTsiObsPnlTFExtMtf1d_2,		vTsiObsPnlTFExtMtf1d_3)

/// ─── Table Signal
if showTsiObsPnlSignalPanel
	if showTsiObsPnlSignalTsi
		FunTsiObsPnlCalculateSignal		(0,	0,	'Tsi',		vTsiObsPnlTFSignalTsi,	vTsiObsPnlTFSignalTsi_2,	vTsiObsPnlTFSignalTsi_3,	vTsiObsPnlTFSignalTsi_4,	0,		100)
	if showTsiObsPnlSignalMtf
		FunTsiObsPnlCalculateSignal		(0,	1,	'Mtf',		vTsiObsPnlTFSignalMtf,	vTsiObsPnlTFSignalMtf_2,	vTsiObsPnlTFSignalMtf_3,	vTsiObsPnlTFSignalMtf_4,	20,		80)
	if showTsiObsPnlSignalRsi
		FunTsiObsPnlCalculateSignal		(0,	3,	'Rsi',		vTsiObsPnlTFSignalRsi,	vTsiObsPnlTFSignalRsi_2,	vTsiObsPnlTFSignalRsi_3,	vTsiObsPnlTFSignalRsi_4,	25,		75)
	if showTsiObsPnlSignalMfi
		FunTsiObsPnlCalculateSignal		(0, 4,	'Mfi',		vTsiObsPnlTFSignalMfi,	vTsiObsPnlTFSignalMfi_2,	vTsiObsPnlTFSignalMfi_3,	vTsiObsPnlTFSignalMfi_4,	-10,	110)
	if showTsiObsPnlSignalAdx
		FunTsiObsPnlCalculateSignal		(0,	2,	'Adx',		vTsiObsPnlTFSignalAdx,	vTsiObsPnlTFSignalAdx_2,	vTsiObsPnlTFSignalAdx_3,	vTsiObsPnlTFSignalAdx_4,	10,		40)

//// ─────────────────────────────────────────────────────────────────────
